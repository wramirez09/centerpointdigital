"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lg-thumbnail.js";
exports.ids = ["vendor-chunks/lg-thumbnail.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/lg-thumbnail.js/dist/lg-thumbnail.js":
/*!***********************************************************!*\
  !*** ./node_modules/lg-thumbnail.js/dist/lg-thumbnail.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n/**!\n * lg-thumbnail.js | 1.2.0 | May 20th 2020\n * http://sachinchoolur.github.io/lg-thumbnail.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */ (function(f) {\n    if (true) {\n        module.exports = f();\n    } else { var g; }\n})(function() {\n    var define1, module1, exports1;\n    return (function() {\n        function r(e, n, t) {\n            function o(i, f) {\n                if (!n[i]) {\n                    if (!e[i]) {\n                        var c = undefined;\n                        if (!f && c) return require(i, !0);\n                        if (u) return u(i, !0);\n                        var a = new Error(\"Cannot find module '\" + i + \"'\");\n                        throw a.code = \"MODULE_NOT_FOUND\", a;\n                    }\n                    var p = n[i] = {\n                        exports: {}\n                    };\n                    e[i][0].call(p.exports, function(r) {\n                        var n = e[i][1][r];\n                        return o(n || r);\n                    }, p, p.exports, r, e, n, t);\n                }\n                return n[i].exports;\n            }\n            for(var u = undefined, i = 0; i < t.length; i++)o(t[i]);\n            return o;\n        }\n        return r;\n    })()({\n        1: [\n            function(require1, module1, exports1) {\n                (function(global1, factory) {\n                    if (typeof define1 === \"function\" && define1.amd) {\n                        define1([], factory);\n                    } else if (typeof exports1 !== \"undefined\") {\n                        factory();\n                    } else {\n                        var mod = {\n                            exports: {}\n                        };\n                        factory();\n                        global1.lgThumbnail = mod.exports;\n                    }\n                })(this, function() {\n                    \"use strict\";\n                    var _extends = Object.assign || function(target) {\n                        for(var i = 1; i < arguments.length; i++){\n                            var source = arguments[i];\n                            for(var key in source){\n                                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                                    target[key] = source[key];\n                                }\n                            }\n                        }\n                        return target;\n                    };\n                    var thumbnailDefaults = {\n                        thumbnail: true,\n                        animateThumb: true,\n                        currentPagerPosition: \"middle\",\n                        thumbWidth: 100,\n                        thumbContHeight: 100,\n                        thumbMargin: 5,\n                        exThumbImage: false,\n                        showThumbByDefault: true,\n                        toggleThumb: true,\n                        pullCaptionUp: true,\n                        enableThumbDrag: true,\n                        enableThumbSwipe: true,\n                        swipeThreshold: 50,\n                        loadYoutubeThumbnail: true,\n                        youtubeThumbSize: 1,\n                        loadVimeoThumbnail: true,\n                        vimeoThumbSize: \"thumbnail_small\",\n                        loadDailymotionThumbnail: true\n                    };\n                    var Thumbnail = function Thumbnail(element) {\n                        this.el = element;\n                        this.core = window.lgData[this.el.getAttribute(\"lg-uid\")];\n                        this.core.s = _extends({}, thumbnailDefaults, this.core.s);\n                        this.thumbOuter = null;\n                        this.thumbOuterWidth = 0;\n                        this.thumbTotalWidth = this.core.items.length * (this.core.s.thumbWidth + this.core.s.thumbMargin);\n                        this.thumbIndex = this.core.index;\n                        // Thumbnail animation value\n                        this.left = 0;\n                        this.init();\n                        return this;\n                    };\n                    Thumbnail.prototype.init = function() {\n                        var _this = this;\n                        if (this.core.s.thumbnail && this.core.items.length > 1) {\n                            if (this.core.s.showThumbByDefault) {\n                                setTimeout(function() {\n                                    utils.addClass(_this.core.outer, \"lg-thumb-open\");\n                                }, 700);\n                            }\n                            if (this.core.s.pullCaptionUp) {\n                                utils.addClass(this.core.outer, \"lg-pull-caption-up\");\n                            }\n                            this.build();\n                            if (this.core.s.animateThumb) {\n                                if (this.core.s.enableThumbDrag && !this.core.isTouch && this.core.doCss()) {\n                                    this.enableThumbDrag();\n                                }\n                                if (this.core.s.enableThumbSwipe && this.core.isTouch && this.core.doCss()) {\n                                    this.enableThumbSwipe();\n                                }\n                                this.thumbClickable = false;\n                            } else {\n                                this.thumbClickable = true;\n                            }\n                            this.toggle();\n                            this.thumbkeyPress();\n                        }\n                    };\n                    Thumbnail.prototype.build = function() {\n                        var _this = this;\n                        var thumbList = \"\";\n                        var vimeoErrorThumbSize = \"\";\n                        var $thumb;\n                        var html = '<div class=\"lg-thumb-outer\">' + '<div class=\"lg-thumb group\">' + \"</div>\" + \"</div>\";\n                        switch(this.core.s.vimeoThumbSize){\n                            case \"thumbnail_large\":\n                                vimeoErrorThumbSize = \"640\";\n                                break;\n                            case \"thumbnail_medium\":\n                                vimeoErrorThumbSize = \"200x150\";\n                                break;\n                            case \"thumbnail_small\":\n                                vimeoErrorThumbSize = \"100x75\";\n                        }\n                        utils.addClass(_this.core.outer, \"lg-has-thumb\");\n                        _this.core.outer.querySelector(\".lg\").insertAdjacentHTML(\"beforeend\", html);\n                        _this.thumbOuter = _this.core.outer.querySelector(\".lg-thumb-outer\");\n                        _this.thumbOuterWidth = _this.thumbOuter.offsetWidth;\n                        if (_this.core.s.animateThumb) {\n                            _this.core.outer.querySelector(\".lg-thumb\").style.width = _this.thumbTotalWidth + \"px\";\n                            _this.core.outer.querySelector(\".lg-thumb\").style.position = \"relative\";\n                        }\n                        if (this.core.s.animateThumb) {\n                            _this.thumbOuter.style.height = _this.core.s.thumbContHeight + \"px\";\n                        }\n                        function getThumb(src, thumb, index) {\n                            var isVideo = _this.core.isVideo(src, index) || {};\n                            var thumbImg;\n                            var vimeoId = \"\";\n                            if (isVideo.youtube || isVideo.vimeo || isVideo.dailymotion) {\n                                if (isVideo.youtube) {\n                                    if (_this.core.s.loadYoutubeThumbnail) {\n                                        thumbImg = \"//img.youtube.com/vi/\" + isVideo.youtube[1] + \"/\" + _this.core.s.youtubeThumbSize + \".jpg\";\n                                    } else {\n                                        thumbImg = thumb;\n                                    }\n                                } else if (isVideo.vimeo) {\n                                    if (_this.core.s.loadVimeoThumbnail) {\n                                        thumbImg = \"//i.vimeocdn.com/video/error_\" + vimeoErrorThumbSize + \".jpg\";\n                                        vimeoId = isVideo.vimeo[1];\n                                    } else {\n                                        thumbImg = thumb;\n                                    }\n                                } else if (isVideo.dailymotion) {\n                                    if (_this.core.s.loadDailymotionThumbnail) {\n                                        thumbImg = \"//www.dailymotion.com/thumbnail/video/\" + isVideo.dailymotion[1];\n                                    } else {\n                                        thumbImg = thumb;\n                                    }\n                                }\n                            } else {\n                                thumbImg = thumb;\n                            }\n                            thumbList += '<div data-vimeo-id=\"' + vimeoId + '\" class=\"lg-thumb-item\" style=\"width:' + _this.core.s.thumbWidth + \"px; margin-right: \" + _this.core.s.thumbMargin + 'px\"><img src=\"' + thumbImg + '\" /></div>';\n                            vimeoId = \"\";\n                        }\n                        if (_this.core.s.dynamic) {\n                            for(var j = 0; j < _this.core.s.dynamicEl.length; j++){\n                                getThumb(_this.core.s.dynamicEl[j].src, _this.core.s.dynamicEl[j].thumb, j);\n                            }\n                        } else {\n                            for(var i = 0; i < _this.core.items.length; i++){\n                                if (!_this.core.s.exThumbImage) {\n                                    getThumb(_this.core.items[i].getAttribute(\"href\") || _this.core.items[i].getAttribute(\"data-src\"), _this.core.items[i].querySelector(\"img\").getAttribute(\"src\"), i);\n                                } else {\n                                    getThumb(_this.core.items[i].getAttribute(\"href\") || _this.core.items[i].getAttribute(\"data-src\"), _this.core.items[i].getAttribute(_this.core.s.exThumbImage), i);\n                                }\n                            }\n                        }\n                        _this.core.outer.querySelector(\".lg-thumb\").innerHTML = thumbList;\n                        $thumb = _this.core.outer.querySelectorAll(\".lg-thumb-item\");\n                        for(var n = 0; n < $thumb.length; n++){\n                            /*jshint loopfunc: true */ (function(index) {\n                                var $this = $thumb[index];\n                                var vimeoVideoId = $this.getAttribute(\"data-vimeo-id\");\n                                if (vimeoVideoId) {\n                                    window[\"lgJsonP\" + _this.el.getAttribute(\"lg-uid\") + \"\" + n] = function(content) {\n                                        $this.querySelector(\"img\").setAttribute(\"src\", content[0][_this.core.s.vimeoThumbSize]);\n                                    };\n                                    var script = document.createElement(\"script\");\n                                    script.className = \"lg-script\";\n                                    script.src = \"//www.vimeo.com/api/v2/video/\" + vimeoVideoId + \".json?callback=lgJsonP\" + _this.el.getAttribute(\"lg-uid\") + \"\" + n;\n                                    document.body.appendChild(script);\n                                }\n                            })(n);\n                        }\n                        // manage active class for thumbnail\n                        utils.addClass($thumb[_this.core.index], \"active\");\n                        utils.on(_this.core.el, \"onBeforeSlide.lgtm\", function() {\n                            for(var j = 0; j < $thumb.length; j++){\n                                utils.removeClass($thumb[j], \"active\");\n                            }\n                            utils.addClass($thumb[_this.core.index], \"active\");\n                        });\n                        for(var k = 0; k < $thumb.length; k++){\n                            /*jshint loopfunc: true */ (function(index) {\n                                utils.on($thumb[index], \"click.lg touchend.lg\", function() {\n                                    setTimeout(function() {\n                                        // In IE9 and bellow touch does not support\n                                        // Go to slide if browser does not support css transitions\n                                        if (_this.thumbClickable && !_this.core.lgBusy || !_this.core.doCss()) {\n                                            _this.core.index = index;\n                                            _this.core.slide(_this.core.index, false, true);\n                                        }\n                                    }, 50);\n                                });\n                            })(k);\n                        }\n                        utils.on(_this.core.el, \"onBeforeSlide.lgtm\", function() {\n                            _this.animateThumb(_this.core.index);\n                        });\n                        utils.on(window, \"resize.lgthumb orientationchange.lgthumb\", function() {\n                            setTimeout(function() {\n                                _this.animateThumb(_this.core.index);\n                                _this.thumbOuterWidth = _this.thumbOuter.offsetWidth;\n                            }, 200);\n                        });\n                    };\n                    Thumbnail.prototype.setTranslate = function(value) {\n                        utils.setVendor(this.core.outer.querySelector(\".lg-thumb\"), \"Transform\", \"translate3d(-\" + value + \"px, 0px, 0px)\");\n                    };\n                    Thumbnail.prototype.animateThumb = function(index) {\n                        var $thumb = this.core.outer.querySelector(\".lg-thumb\");\n                        if (this.core.s.animateThumb) {\n                            var position;\n                            switch(this.core.s.currentPagerPosition){\n                                case \"left\":\n                                    position = 0;\n                                    break;\n                                case \"middle\":\n                                    position = this.thumbOuterWidth / 2 - this.core.s.thumbWidth / 2;\n                                    break;\n                                case \"right\":\n                                    position = this.thumbOuterWidth - this.core.s.thumbWidth;\n                            }\n                            this.left = (this.core.s.thumbWidth + this.core.s.thumbMargin) * index - 1 - position;\n                            if (this.left > this.thumbTotalWidth - this.thumbOuterWidth) {\n                                this.left = this.thumbTotalWidth - this.thumbOuterWidth;\n                            }\n                            if (this.left < 0) {\n                                this.left = 0;\n                            }\n                            if (this.core.lGalleryOn) {\n                                if (!utils.hasClass($thumb, \"on\")) {\n                                    utils.setVendor(this.core.outer.querySelector(\".lg-thumb\"), \"TransitionDuration\", this.core.s.speed + \"ms\");\n                                }\n                                if (!this.core.doCss()) {\n                                    $thumb.style.left = -this.left + \"px\";\n                                }\n                            } else {\n                                if (!this.core.doCss()) {\n                                    $thumb.style.left = -this.left + \"px\";\n                                }\n                            }\n                            this.setTranslate(this.left);\n                        }\n                    };\n                    // Enable thumbnail dragging and swiping\n                    Thumbnail.prototype.enableThumbDrag = function() {\n                        var _this = this;\n                        var startCoords = 0;\n                        var endCoords = 0;\n                        var isDraging = false;\n                        var isMoved = false;\n                        var tempLeft = 0;\n                        utils.addClass(_this.thumbOuter, \"lg-grab\");\n                        utils.on(_this.core.outer.querySelector(\".lg-thumb\"), \"mousedown.lgthumb\", function(e) {\n                            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                                // execute only on .lg-object\n                                e.preventDefault();\n                                startCoords = e.pageX;\n                                isDraging = true;\n                                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                                _this.core.outer.scrollLeft += 1;\n                                _this.core.outer.scrollLeft -= 1;\n                                // *\n                                _this.thumbClickable = false;\n                                utils.removeClass(_this.thumbOuter, \"lg-grab\");\n                                utils.addClass(_this.thumbOuter, \"lg-grabbing\");\n                            }\n                        });\n                        utils.on(window, \"mousemove.lgthumb\", function(e) {\n                            if (isDraging) {\n                                tempLeft = _this.left;\n                                isMoved = true;\n                                endCoords = e.pageX;\n                                utils.addClass(_this.thumbOuter, \"lg-dragging\");\n                                tempLeft = tempLeft - (endCoords - startCoords);\n                                if (tempLeft > _this.thumbTotalWidth - _this.thumbOuterWidth) {\n                                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\n                                }\n                                if (tempLeft < 0) {\n                                    tempLeft = 0;\n                                }\n                                // move current slide\n                                _this.setTranslate(tempLeft);\n                            }\n                        });\n                        utils.on(window, \"mouseup.lgthumb\", function() {\n                            if (isMoved) {\n                                isMoved = false;\n                                utils.removeClass(_this.thumbOuter, \"lg-dragging\");\n                                _this.left = tempLeft;\n                                if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\n                                    _this.thumbClickable = true;\n                                }\n                            } else {\n                                _this.thumbClickable = true;\n                            }\n                            if (isDraging) {\n                                isDraging = false;\n                                utils.removeClass(_this.thumbOuter, \"lg-grabbing\");\n                                utils.addClass(_this.thumbOuter, \"lg-grab\");\n                            }\n                        });\n                    };\n                    Thumbnail.prototype.enableThumbSwipe = function() {\n                        var _this = this;\n                        var startCoords = 0;\n                        var endCoords = 0;\n                        var isMoved = false;\n                        var tempLeft = 0;\n                        utils.on(_this.core.outer.querySelector(\".lg-thumb\"), \"touchstart.lg\", function(e) {\n                            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                                e.preventDefault();\n                                startCoords = e.targetTouches[0].pageX;\n                                _this.thumbClickable = false;\n                            }\n                        });\n                        utils.on(_this.core.outer.querySelector(\".lg-thumb\"), \"touchmove.lg\", function(e) {\n                            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                                e.preventDefault();\n                                endCoords = e.targetTouches[0].pageX;\n                                isMoved = true;\n                                utils.addClass(_this.thumbOuter, \"lg-dragging\");\n                                tempLeft = _this.left;\n                                tempLeft = tempLeft - (endCoords - startCoords);\n                                if (tempLeft > _this.thumbTotalWidth - _this.thumbOuterWidth) {\n                                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\n                                }\n                                if (tempLeft < 0) {\n                                    tempLeft = 0;\n                                }\n                                // move current slide\n                                _this.setTranslate(tempLeft);\n                            }\n                        });\n                        utils.on(_this.core.outer.querySelector(\".lg-thumb\"), \"touchend.lg\", function() {\n                            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                                if (isMoved) {\n                                    isMoved = false;\n                                    utils.removeClass(_this.thumbOuter, \"lg-dragging\");\n                                    if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\n                                        _this.thumbClickable = true;\n                                    }\n                                    _this.left = tempLeft;\n                                } else {\n                                    _this.thumbClickable = true;\n                                }\n                            } else {\n                                _this.thumbClickable = true;\n                            }\n                        });\n                    };\n                    Thumbnail.prototype.toggle = function() {\n                        var _this = this;\n                        if (_this.core.s.toggleThumb) {\n                            utils.addClass(_this.core.outer, \"lg-can-toggle\");\n                            _this.thumbOuter.insertAdjacentHTML(\"beforeend\", '<button aria-label=\"Toggle thumbnails\" class=\"lg-toggle-thumb lg-icon\"></button>');\n                            utils.on(_this.core.outer.querySelector(\".lg-toggle-thumb\"), \"click.lg\", function() {\n                                if (utils.hasClass(_this.core.outer, \"lg-thumb-open\")) {\n                                    utils.removeClass(_this.core.outer, \"lg-thumb-open\");\n                                } else {\n                                    utils.addClass(_this.core.outer, \"lg-thumb-open\");\n                                }\n                            });\n                        }\n                    };\n                    Thumbnail.prototype.thumbkeyPress = function() {\n                        var _this = this;\n                        utils.on(window, \"keydown.lgthumb\", function(e) {\n                            if (e.keyCode === 38) {\n                                e.preventDefault();\n                                utils.addClass(_this.core.outer, \"lg-thumb-open\");\n                            } else if (e.keyCode === 40) {\n                                e.preventDefault();\n                                utils.removeClass(_this.core.outer, \"lg-thumb-open\");\n                            }\n                        });\n                    };\n                    Thumbnail.prototype.destroy = function(d) {\n                        if (this.core.s.thumbnail && this.core.items.length > 1) {\n                            utils.off(window, \".lgthumb\");\n                            if (!d) {\n                                this.thumbOuter.parentNode.removeChild(this.thumbOuter);\n                            }\n                            utils.removeClass(this.core.outer, \"lg-has-thumb\");\n                            var lgScript = document.getElementsByClassName(\"lg-script\");\n                            while(lgScript[0]){\n                                lgScript[0].parentNode.removeChild(lgScript[0]);\n                            }\n                        }\n                    };\n                    window.lgModules.thumbnail = Thumbnail;\n                });\n            },\n            {}\n        ]\n    }, {}, [\n        1\n    ])(1);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lg-thumbnail.js/dist/lg-thumbnail.js\n");

/***/ })

};
;