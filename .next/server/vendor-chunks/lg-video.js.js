"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lg-video.js";
exports.ids = ["vendor-chunks/lg-video.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/lg-video.js/dist/lg-video.js":
/*!***************************************************!*\
  !*** ./node_modules/lg-video.js/dist/lg-video.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n/**!\n * lg-video.js | 1.3.0 | November 7th 2020\n * http://sachinchoolur.github.io/lg-video.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */ (function(f) {\n    if (true) {\n        module.exports = f();\n    } else { var g; }\n})(function() {\n    var define1, module1, exports1;\n    return (function() {\n        function r(e, n, t) {\n            function o(i, f) {\n                if (!n[i]) {\n                    if (!e[i]) {\n                        var c = undefined;\n                        if (!f && c) return require(i, !0);\n                        if (u) return u(i, !0);\n                        var a = new Error(\"Cannot find module '\" + i + \"'\");\n                        throw a.code = \"MODULE_NOT_FOUND\", a;\n                    }\n                    var p = n[i] = {\n                        exports: {}\n                    };\n                    e[i][0].call(p.exports, function(r) {\n                        var n = e[i][1][r];\n                        return o(n || r);\n                    }, p, p.exports, r, e, n, t);\n                }\n                return n[i].exports;\n            }\n            for(var u = undefined, i = 0; i < t.length; i++)o(t[i]);\n            return o;\n        }\n        return r;\n    })()({\n        1: [\n            function(require1, module1, exports1) {\n                (function(global1, factory) {\n                    if (typeof define1 === \"function\" && define1.amd) {\n                        define1([], factory);\n                    } else if (typeof exports1 !== \"undefined\") {\n                        factory();\n                    } else {\n                        var mod = {\n                            exports: {}\n                        };\n                        factory();\n                        global1.lgVideo = mod.exports;\n                    }\n                })(this, function() {\n                    \"use strict\";\n                    var _extends = Object.assign || function(target) {\n                        for(var i = 1; i < arguments.length; i++){\n                            var source = arguments[i];\n                            for(var key in source){\n                                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                                    target[key] = source[key];\n                                }\n                            }\n                        }\n                        return target;\n                    };\n                    var videoDefaults = {\n                        videoMaxWidth: \"855px\",\n                        autoplayFirstVideo: true,\n                        youtubePlayerParams: false,\n                        vimeoPlayerParams: false,\n                        dailymotionPlayerParams: false,\n                        vkPlayerParams: false,\n                        videojs: false,\n                        videojsOptions: {}\n                    };\n                    var Video = function Video(element) {\n                        this.el = element;\n                        this.core = window.lgData[this.el.getAttribute(\"lg-uid\")];\n                        this.core.s = _extends({}, videoDefaults, this.core.s);\n                        this.videoLoaded = false;\n                        this.init();\n                        return this;\n                    };\n                    Video.prototype.init = function() {\n                        var _this = this;\n                        // Event triggered when video url found without poster\n                        utils.on(_this.core.el, \"hasVideo.lgtm\", function(event) {\n                            _this.core.___slide[event.detail.index].querySelector(\".lg-video\").insertAdjacentHTML(\"beforeend\", _this.loadVideo(event.detail.src, \"lg-object\", true, event.detail.index, event.detail.html));\n                            if (event.detail.html) {\n                                if (_this.core.s.videojs) {\n                                    try {\n                                        videojs(_this.core.___slide[event.detail.index].querySelector(\".lg-html5\"), _this.core.s.videojsOptions, function() {\n                                            if (!_this.videoLoaded && event.detail.index === _this.core.index && _this.core.s.autoplayFirstVideo) {\n                                                this.play();\n                                            }\n                                        });\n                                    } catch (e) {\n                                        console.error(\"lightGallery:- Make sure you have included videojs\");\n                                    }\n                                } else {\n                                    if (!_this.videoLoaded && event.detail.index === _this.core.index && _this.core.s.autoplayFirstVideo) {\n                                        _this.core.___slide[event.detail.index].querySelector(\".lg-html5\").play();\n                                    }\n                                }\n                            }\n                        });\n                        // Set max width for video\n                        utils.on(_this.core.el, \"onAferAppendSlide.lgtm\", function(event) {\n                            if (_this.core.___slide[event.detail.index].querySelector(\".lg-video-cont\")) {\n                                _this.core.___slide[event.detail.index].querySelector(\".lg-video-cont\").style.maxWidth = _this.core.s.videoMaxWidth;\n                                _this.videoLoaded = true;\n                            }\n                        });\n                        var loadOnClick = function loadOnClick($el) {\n                            // check slide has poster\n                            if (utils.hasClass($el.querySelector(\".lg-object\"), \"lg-has-poster\") && $el.querySelector(\".lg-object\").style.display !== \"none\") {\n                                // check already video element present\n                                if (!utils.hasClass($el, \"lg-has-video\")) {\n                                    utils.addClass($el, \"lg-video-playing\");\n                                    utils.addClass($el, \"lg-has-video\");\n                                    var _src;\n                                    var _html;\n                                    var _loadVideo = function _loadVideo(_src, _html) {\n                                        $el.querySelector(\".lg-video\").insertAdjacentHTML(\"beforeend\", _this.loadVideo(_src, \"\", false, _this.core.index, _html));\n                                        if (_html) {\n                                            if (_this.core.s.videojs) {\n                                                try {\n                                                    videojs(_this.core.___slide[_this.core.index].querySelector(\".lg-html5\"), _this.core.s.videojsOptions, function() {\n                                                        this.play();\n                                                    });\n                                                } catch (e) {\n                                                    console.error(\"lightGallery:- Make sure you have included videojs\");\n                                                }\n                                            } else {\n                                                _this.core.___slide[_this.core.index].querySelector(\".lg-html5\").play();\n                                            }\n                                        }\n                                    };\n                                    if (_this.core.s.dynamic) {\n                                        _src = _this.core.s.dynamicEl[_this.core.index].src;\n                                        _html = _this.core.s.dynamicEl[_this.core.index].html;\n                                        _loadVideo(_src, _html);\n                                    } else {\n                                        _src = _this.core.items[_this.core.index].getAttribute(\"href\") || _this.core.items[_this.core.index].getAttribute(\"data-src\");\n                                        _html = _this.core.items[_this.core.index].getAttribute(\"data-html\");\n                                        _loadVideo(_src, _html);\n                                    }\n                                    var $tempImg = $el.querySelector(\".lg-object\");\n                                    $el.querySelector(\".lg-video\").appendChild($tempImg);\n                                    // @todo loading icon for html5 videos also\n                                    // for showing the loading indicator while loading video\n                                    if (!utils.hasClass($el.querySelector(\".lg-video-object\"), \"lg-html5\")) {\n                                        utils.removeClass($el, \"lg-complete\");\n                                        utils.on($el.querySelector(\".lg-video-object\"), \"load.lg error.lg\", function() {\n                                            utils.addClass($el, \"lg-complete\");\n                                        });\n                                    }\n                                } else {\n                                    var youtubePlayer = $el.querySelector(\".lg-youtube\");\n                                    var vimeoPlayer = $el.querySelector(\".lg-vimeo\");\n                                    var dailymotionPlayer = $el.querySelector(\".lg-dailymotion\");\n                                    var html5Player = $el.querySelector(\".lg-html5\");\n                                    if (youtubePlayer) {\n                                        youtubePlayer.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', \"*\");\n                                    } else if (vimeoPlayer) {\n                                        try {\n                                            new Vimeo.Player(vimeoPlayer).play().catch(function(error) {\n                                                console.error(\"error playing the video:\", error.name);\n                                            });\n                                        } catch (e) {\n                                            console.warn(\"lightGallery:- Make sure you have included https://github.com/vimeo/player.js\");\n                                        }\n                                    } else if (dailymotionPlayer) {\n                                        dailymotionPlayer.contentWindow.postMessage(\"play\", \"*\");\n                                    } else if (html5Player) {\n                                        if (_this.core.s.videojs) {\n                                            try {\n                                                videojs(html5Player).play();\n                                            } catch (e) {\n                                                console.error(\"lightGallery:- Make sure you have included videojs\");\n                                            }\n                                        } else {\n                                            html5Player.play();\n                                        }\n                                    }\n                                    utils.addClass($el, \"lg-video-playing\");\n                                }\n                            }\n                        };\n                        if (_this.core.doCss() && _this.core.items.length > 1 && (_this.core.s.enableSwipe && _this.core.isTouch || _this.core.s.enableDrag && !_this.core.isTouch)) {\n                            utils.on(_this.core.el, \"onSlideClick.lgtm\", function() {\n                                var $el = _this.core.___slide[_this.core.index];\n                                loadOnClick($el);\n                            });\n                        } else {\n                            // For IE 9 and bellow\n                            for(var i = 0; i < _this.core.___slide.length; i++){\n                                /*jshint loopfunc: true */ (function(index) {\n                                    utils.on(_this.core.___slide[index], \"click.lg\", function() {\n                                        loadOnClick(_this.core.___slide[index]);\n                                    });\n                                })(i);\n                            }\n                        }\n                        utils.on(_this.core.el, \"onBeforeSlide.lgtm\", function(event) {\n                            var $videoSlide = _this.core.___slide[event.detail.prevIndex];\n                            var youtubePlayer = $videoSlide.querySelector(\".lg-youtube\");\n                            var vimeoPlayer = $videoSlide.querySelector(\".lg-vimeo\");\n                            var dailymotionPlayer = $videoSlide.querySelector(\".lg-dailymotion\");\n                            var vkPlayer = $videoSlide.querySelector(\".lg-vk\");\n                            var html5Player = $videoSlide.querySelector(\".lg-html5\");\n                            if (youtubePlayer) {\n                                youtubePlayer.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', \"*\");\n                            } else if (vimeoPlayer) {\n                                try {\n                                    new Vimeo.Player(vimeoPlayer).pause().catch(function(error) {\n                                        console.error(\"Unable to pause the video:\", error.name);\n                                    });\n                                } catch (e) {\n                                    console.warn(\"lightGallery:- Make sure you have included https://github.com/vimeo/player.js\");\n                                }\n                            } else if (dailymotionPlayer) {\n                                dailymotionPlayer.contentWindow.postMessage(\"pause\", \"*\");\n                            } else if (html5Player) {\n                                if (_this.core.s.videojs) {\n                                    try {\n                                        videojs(html5Player).pause();\n                                    } catch (e) {\n                                        console.error(\"lightGallery:- Make sure you have included videojs\");\n                                    }\n                                } else {\n                                    html5Player.pause();\n                                }\n                            }\n                            if (vkPlayer) {\n                                vkPlayer.setAttribute(\"src\", vkPlayer.getAttribute(\"src\").replace(\"&autoplay\", \"&noplay\"));\n                            }\n                            var _src;\n                            if (_this.core.s.dynamic) {\n                                _src = _this.core.s.dynamicEl[event.detail.index].src;\n                            } else {\n                                _src = _this.core.items[event.detail.index].getAttribute(\"href\") || _this.core.items[event.detail.index].getAttribute(\"data-src\");\n                            }\n                            var _isVideo = _this.core.isVideo(_src, event.detail.index) || {};\n                            if (_isVideo.youtube || _isVideo.vimeo || _isVideo.dailymotion || _isVideo.vk) {\n                                utils.addClass(_this.core.outer, \"lg-hide-download\");\n                            }\n                        //$videoSlide.addClass('lg-complete');\n                        });\n                        utils.on(_this.core.el, \"onAfterSlide.lgtm\", function(event) {\n                            utils.removeClass(_this.core.___slide[event.detail.prevIndex], \"lg-video-playing\");\n                        });\n                    };\n                    Video.prototype.loadVideo = function(src, addClass, noposter, index, html) {\n                        var video = \"\";\n                        var autoplay = 1;\n                        var a = \"\";\n                        var isVideo = this.core.isVideo(src, index) || {};\n                        // Enable autoplay for first video if poster doesn't exist\n                        if (noposter) {\n                            if (this.videoLoaded) {\n                                autoplay = 0;\n                            } else {\n                                autoplay = this.core.s.autoplayFirstVideo ? 1 : 0;\n                            }\n                        }\n                        var videoTitle;\n                        if (this.core.s.dynamic) {\n                            videoTitle = this.core.s.dynamicEl[index].title;\n                        } else {\n                            videoTitle = this.core.items[index].getAttribute(\"title\");\n                            if (!videoTitle) {\n                                var firstImage = this.core.items[index].querySelector(\"img\");\n                                if (firstImage) {\n                                    videoTitle = firstImage.getAttribute(\"alt\");\n                                }\n                            }\n                        }\n                        videoTitle = videoTitle ? 'title=\"' + videoTitle + '\"' : \"\";\n                        if (isVideo.youtube) {\n                            a = \"?wmode=opaque&autoplay=\" + autoplay + \"&enablejsapi=1\";\n                            if (this.core.s.youtubePlayerParams) {\n                                a = a + \"&\" + utils.param(this.core.s.youtubePlayerParams);\n                            }\n                            video = '<iframe allow=\"autoplay\" class=\"lg-video-object lg-youtube ' + addClass + '\" ' + videoTitle + ' width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/' + isVideo.youtube[1] + a + '\" frameborder=\"0\" allowfullscreen></iframe>';\n                        } else if (isVideo.vimeo) {\n                            a = \"?autoplay=\" + autoplay;\n                            if (this.core.s.vimeoPlayerParams) {\n                                a = a + \"&\" + utils.param(this.core.s.vimeoPlayerParams);\n                            }\n                            video = '<iframe allow=\"autoplay\" class=\"lg-video-object lg-vimeo ' + addClass + '\" ' + videoTitle + ' width=\"560\" height=\"315\"  src=\"//player.vimeo.com/video/' + isVideo.vimeo[1] + a + '\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';\n                        } else if (isVideo.dailymotion) {\n                            a = \"?wmode=opaque&autoplay=\" + autoplay + \"&api=postMessage\";\n                            if (this.core.s.dailymotionPlayerParams) {\n                                a = a + \"&\" + utils.param(this.core.s.dailymotionPlayerParams);\n                            }\n                            video = '<iframe allow=\"autoplay\" class=\"lg-video-object lg-dailymotion ' + addClass + '\" ' + videoTitle + ' width=\"560\" height=\"315\" src=\"//www.dailymotion.com/embed/video/' + isVideo.dailymotion[1] + a + '\" frameborder=\"0\" allowfullscreen></iframe>';\n                        } else if (isVideo.html5) {\n                            var fL = html.substring(0, 1);\n                            if (fL === \".\" || fL === \"#\") {\n                                html = document.querySelector(html).innerHTML;\n                            }\n                            video = html;\n                        } else if (isVideo.vk) {\n                            a = \"&autoplay=\" + autoplay;\n                            if (this.core.s.vkPlayerParams) {\n                                a = a + \"&\" + utils.param(this.core.s.vkPlayerParams);\n                            }\n                            video = '<iframe allow=\"autoplay\" class=\"lg-video-object lg-vk ' + addClass + '\" ' + videoTitle + '  width=\"560\" height=\"315\" src=\"//vk.com/video_ext.php?' + isVideo.vk[1] + a + '\" frameborder=\"0\" allowfullscreen></iframe>';\n                        }\n                        return video;\n                    };\n                    Video.prototype.destroy = function() {\n                        this.videoLoaded = false;\n                    };\n                    window.lgModules.video = Video;\n                });\n            },\n            {}\n        ]\n    }, {}, [\n        1\n    ])(1);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lg-video.js/dist/lg-video.js\n");

/***/ })

};
;