"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lg-zoom.js";
exports.ids = ["vendor-chunks/lg-zoom.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/lg-zoom.js/dist/lg-zoom.js":
/*!*************************************************!*\
  !*** ./node_modules/lg-zoom.js/dist/lg-zoom.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n/**!\n * lg-zoom.js | 1.3.0 | October 14th 2020\n * http://sachinchoolur.github.io/lg-zoom.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */ (function(f) {\n    if (true) {\n        module.exports = f();\n    } else { var g; }\n})(function() {\n    var define1, module1, exports1;\n    return (function() {\n        function r(e, n, t) {\n            function o(i, f) {\n                if (!n[i]) {\n                    if (!e[i]) {\n                        var c = undefined;\n                        if (!f && c) return require(i, !0);\n                        if (u) return u(i, !0);\n                        var a = new Error(\"Cannot find module '\" + i + \"'\");\n                        throw a.code = \"MODULE_NOT_FOUND\", a;\n                    }\n                    var p = n[i] = {\n                        exports: {}\n                    };\n                    e[i][0].call(p.exports, function(r) {\n                        var n = e[i][1][r];\n                        return o(n || r);\n                    }, p, p.exports, r, e, n, t);\n                }\n                return n[i].exports;\n            }\n            for(var u = undefined, i = 0; i < t.length; i++)o(t[i]);\n            return o;\n        }\n        return r;\n    })()({\n        1: [\n            function(require1, module1, exports1) {\n                (function(global1, factory) {\n                    if (typeof define1 === \"function\" && define1.amd) {\n                        define1([], factory);\n                    } else if (typeof exports1 !== \"undefined\") {\n                        factory();\n                    } else {\n                        var mod = {\n                            exports: {}\n                        };\n                        factory();\n                        global1.lgZoom = mod.exports;\n                    }\n                })(this, function() {\n                    \"use strict\";\n                    var _extends = Object.assign || function(target) {\n                        for(var i = 1; i < arguments.length; i++){\n                            var source = arguments[i];\n                            for(var key in source){\n                                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                                    target[key] = source[key];\n                                }\n                            }\n                        }\n                        return target;\n                    };\n                    var getUseLeft = function getUseLeft() {\n                        var useLeft = false;\n                        var isChrome = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n                        if (isChrome && parseInt(isChrome[2], 10) < 54) {\n                            useLeft = true;\n                        }\n                        return useLeft;\n                    };\n                    var zoomDefaults = {\n                        scale: 1,\n                        zoom: true,\n                        actualSize: true,\n                        enableZoomAfter: 300,\n                        useLeftForZoom: getUseLeft()\n                    };\n                    var Zoom = function Zoom(element) {\n                        this.el = element;\n                        this.core = window.lgData[this.el.getAttribute(\"lg-uid\")];\n                        this.core.s = _extends({}, zoomDefaults, this.core.s);\n                        if (this.core.s.zoom && this.core.doCss()) {\n                            this.init();\n                            // Store the zoomable timeout value just to clear it while closing\n                            this.zoomabletimeout = false;\n                            // Set the initial value center\n                            this.pageX = window.innerWidth / 2;\n                            this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n                        }\n                        return this;\n                    };\n                    Zoom.prototype.init = function() {\n                        var _this = this;\n                        var zoomIcons = '<button type=\"button\" aria-label=\"Zoom in\" id=\"lg-zoom-in\" class=\"lg-icon\"></button><button type=\"button\" aria-label=\"Zoom out\" id=\"lg-zoom-out\" class=\"lg-icon\"></button>';\n                        if (_this.core.s.actualSize) {\n                            zoomIcons += '<button type=\"button\" aria-label=\"Actual size\" id=\"lg-actual-size\" class=\"lg-icon\"></button>';\n                        }\n                        if (_this.core.s.useLeftForZoom) {\n                            utils.addClass(_this.core.outer, \"lg-use-left-for-zoom\");\n                        } else {\n                            utils.addClass(_this.core.outer, \"lg-use-transition-for-zoom\");\n                        }\n                        this.core.outer.querySelector(\".lg-toolbar\").insertAdjacentHTML(\"beforeend\", zoomIcons);\n                        // Add zoomable class\n                        utils.on(_this.core.el, \"onSlideItemLoad.lgtmzoom\", function(event) {\n                            // delay will be 0 except first time\n                            var _speed = _this.core.s.enableZoomAfter + event.detail.delay;\n                            // set _speed value 0 if gallery opened from direct url and if it is first slide\n                            if (utils.hasClass(document.body, \"lg-from-hash\") && event.detail.delay) {\n                                // will execute only once\n                                _speed = 0;\n                            } else {\n                                // Remove lg-from-hash to enable starting animation.\n                                utils.removeClass(document.body, \"lg-from-hash\");\n                            }\n                            _this.zoomabletimeout = setTimeout(function() {\n                                utils.addClass(_this.core.___slide[event.detail.index], \"lg-zoomable\");\n                            }, _speed + 30);\n                        });\n                        var scale = 1;\n                        /**\n         * @desc Image zoom\n         * Translate the wrap and scale the image to get better user experience\n         *\n         * @param {String} scaleVal - Zoom decrement/increment value\n         */ var zoom = function zoom(scaleVal) {\n                            var image = _this.core.outer.querySelector(\".lg-current .lg-image\");\n                            var _x;\n                            var _y;\n                            // Find offset manually to avoid issue after zoom\n                            var offsetX = (window.innerWidth - image.clientWidth) / 2;\n                            var offsetY = (window.innerHeight - image.clientHeight) / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n                            _x = _this.pageX - offsetX;\n                            _y = _this.pageY - offsetY;\n                            var x = (scaleVal - 1) * _x;\n                            var y = (scaleVal - 1) * _y;\n                            utils.setVendor(image, \"Transform\", \"scale3d(\" + scaleVal + \", \" + scaleVal + \", 1)\");\n                            image.setAttribute(\"data-scale\", scaleVal);\n                            if (_this.core.s.useLeftForZoom) {\n                                image.parentElement.style.left = -x + \"px\";\n                                image.parentElement.style.top = -y + \"px\";\n                            } else {\n                                utils.setVendor(image.parentElement, \"Transform\", \"translate3d(-\" + x + \"px, -\" + y + \"px, 0)\");\n                            }\n                            image.parentElement.setAttribute(\"data-x\", x);\n                            image.parentElement.setAttribute(\"data-y\", y);\n                        };\n                        var callScale = function callScale() {\n                            if (scale > 1) {\n                                utils.addClass(_this.core.outer, \"lg-zoomed\");\n                            } else {\n                                _this.resetZoom();\n                            }\n                            if (scale < 1) {\n                                scale = 1;\n                            }\n                            zoom(scale);\n                        };\n                        var actualSize = function actualSize(event, image, index, fromIcon) {\n                            var w = image.clientWidth;\n                            var nw;\n                            if (_this.core.s.dynamic) {\n                                nw = _this.core.s.dynamicEl[index].width || image.naturalWidth || w;\n                            } else {\n                                nw = _this.core.items[index].getAttribute(\"data-width\") || image.naturalWidth || w;\n                            }\n                            var _scale;\n                            if (utils.hasClass(_this.core.outer, \"lg-zoomed\")) {\n                                scale = 1;\n                            } else {\n                                if (nw > w) {\n                                    _scale = nw / w;\n                                    scale = _scale || 2;\n                                }\n                            }\n                            if (fromIcon) {\n                                _this.pageX = window.innerWidth / 2;\n                                _this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n                            } else {\n                                _this.pageX = event.pageX || event.targetTouches[0].pageX;\n                                _this.pageY = event.pageY || event.targetTouches[0].pageY;\n                            }\n                            callScale();\n                            setTimeout(function() {\n                                utils.removeClass(_this.core.outer, \"lg-grabbing\");\n                                utils.addClass(_this.core.outer, \"lg-grab\");\n                            }, 10);\n                        };\n                        var tapped = false;\n                        // event triggered after appending slide content\n                        utils.on(_this.core.el, \"onAferAppendSlide.lgtmzoom\", function(event) {\n                            var index = event.detail.index;\n                            // Get the current element\n                            var image = _this.core.___slide[index].querySelector(\".lg-image\");\n                            if (!_this.core.isTouch) {\n                                utils.on(image, \"dblclick\", function(event) {\n                                    actualSize(event, image, index);\n                                });\n                            }\n                            if (_this.core.isTouch) {\n                                utils.on(image, \"touchstart\", function(event) {\n                                    if (!tapped) {\n                                        tapped = setTimeout(function() {\n                                            tapped = null;\n                                        }, 300);\n                                    } else {\n                                        clearTimeout(tapped);\n                                        tapped = null;\n                                        actualSize(event, image, index);\n                                    }\n                                    event.preventDefault();\n                                });\n                            }\n                        });\n                        // Update zoom on resize and orientationchange\n                        utils.on(window, \"resize.lgzoom scroll.lgzoom orientationchange.lgzoom\", function() {\n                            _this.pageX = window.innerWidth / 2;\n                            _this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n                            zoom(scale);\n                        });\n                        utils.on(document.getElementById(\"lg-zoom-out\"), \"click.lg\", function() {\n                            if (_this.core.outer.querySelector(\".lg-current .lg-image\")) {\n                                scale -= _this.core.s.scale;\n                                callScale();\n                            }\n                        });\n                        utils.on(document.getElementById(\"lg-zoom-in\"), \"click.lg\", function() {\n                            if (_this.core.outer.querySelector(\".lg-current .lg-image\")) {\n                                scale += _this.core.s.scale;\n                                callScale();\n                            }\n                        });\n                        utils.on(document.getElementById(\"lg-actual-size\"), \"click.lg\", function(event) {\n                            actualSize(event, _this.core.___slide[_this.core.index].querySelector(\".lg-image\"), _this.core.index, true);\n                        });\n                        // Reset zoom on slide change\n                        utils.on(_this.core.el, \"onBeforeSlide.lgtm\", function() {\n                            scale = 1;\n                            _this.resetZoom();\n                        });\n                        // Drag option after zoom\n                        if (!_this.core.isTouch) {\n                            _this.zoomDrag();\n                        }\n                        if (_this.core.isTouch) {\n                            _this.zoomSwipe();\n                        }\n                    };\n                    Zoom.prototype.getModifier = function(rotateValue, axis, el) {\n                        var originalRotate = rotateValue;\n                        rotateValue = Math.abs(rotateValue);\n                        var transformValues = this.getCurrentTransform(el);\n                        if (!transformValues) {\n                            return 1;\n                        }\n                        var modifier = 1;\n                        if (axis === \"X\") {\n                            var flipHorizontalValue = Math.sign(parseFloat(transformValues[0]));\n                            if (rotateValue === 0 || rotateValue === 180) {\n                                modifier = 1;\n                            } else if (rotateValue === 90) {\n                                if (originalRotate === -90 && flipHorizontalValue === 1 || originalRotate === 90 && flipHorizontalValue === -1) {\n                                    modifier = -1;\n                                } else {\n                                    modifier = 1;\n                                }\n                            }\n                            modifier = modifier * flipHorizontalValue;\n                        } else {\n                            var flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n                            if (rotateValue === 0 || rotateValue === 180) {\n                                modifier = 1;\n                            } else if (rotateValue === 90) {\n                                var sinX = parseFloat(transformValues[1]);\n                                var sinMinusX = parseFloat(transformValues[2]);\n                                modifier = Math.sign(sinX * sinMinusX * originalRotate * flipVerticalValue);\n                            }\n                            modifier = modifier * flipVerticalValue;\n                        }\n                        return modifier;\n                    };\n                    Zoom.prototype.getImageSize = function($image, rotateValue, axis) {\n                        var imageSizes = {\n                            y: \"offsetHeight\",\n                            x: \"offsetWidth\"\n                        };\n                        if (rotateValue === 90) {\n                            // Swap axis \n                            if (axis === \"x\") {\n                                axis = \"y\";\n                            } else {\n                                axis = \"x\";\n                            }\n                        }\n                        return $image[imageSizes[axis]];\n                    };\n                    Zoom.prototype.getDragCords = function(e, rotateValue) {\n                        if (rotateValue === 90) {\n                            return {\n                                x: e.pageY,\n                                y: e.pageX\n                            };\n                        } else {\n                            return {\n                                x: e.pageX,\n                                y: e.pageY\n                            };\n                        }\n                    };\n                    Zoom.prototype.getSwipeCords = function(e, rotateValue) {\n                        var x = e.targetTouches[0].pageX;\n                        var y = e.targetTouches[0].pageY;\n                        if (rotateValue === 90) {\n                            return {\n                                x: y,\n                                y: x\n                            };\n                        } else {\n                            return {\n                                x: x,\n                                y: y\n                            };\n                        }\n                    };\n                    Zoom.prototype.getPossibleDragCords = function($image, rotateValue) {\n                        var minY = (this.core.outer.querySelector(\".lg\").clientHeight - this.getImageSize($image, rotateValue, \"y\")) / 2;\n                        var maxY = Math.abs(this.getImageSize($image, rotateValue, \"y\") * Math.abs($image.getAttribute(\"data-scale\")) - this.core.outer.querySelector(\".lg\").clientHeight + minY);\n                        var minX = (this.core.outer.querySelector(\".lg\").clientWidth - this.getImageSize($image, rotateValue, \"x\")) / 2;\n                        var maxX = Math.abs(this.getImageSize($image, rotateValue, \"x\") * Math.abs($image.getAttribute(\"data-scale\")) - this.core.outer.querySelector(\".lg\").clientWidth + minX);\n                        if (rotateValue === 90) {\n                            return {\n                                minY: minX,\n                                maxY: maxX,\n                                minX: minY,\n                                maxX: maxY\n                            };\n                        } else {\n                            return {\n                                minY: minY,\n                                maxY: maxY,\n                                minX: minX,\n                                maxX: maxX\n                            };\n                        }\n                    };\n                    Zoom.prototype.getDragAllowedAxises = function($image, rotateValue) {\n                        var allowY = this.getImageSize($image, rotateValue, \"y\") * $image.getAttribute(\"data-scale\") > this.core.outer.querySelector(\".lg\").clientHeight;\n                        var allowX = this.getImageSize($image, rotateValue, \"x\") * $image.getAttribute(\"data-scale\") > this.core.outer.querySelector(\".lg\").clientWidth;\n                        if (rotateValue === 90) {\n                            return {\n                                allowX: allowY,\n                                allowY: allowX\n                            };\n                        } else {\n                            return {\n                                allowX: allowX,\n                                allowY: allowY\n                            };\n                        }\n                    };\n                    /**\n     * \n     * @param {Element} el \n     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\n     * Get the current transform value\n     */ Zoom.prototype.getCurrentTransform = function(el) {\n                        if (!el) {\n                            return 0;\n                        }\n                        var st = window.getComputedStyle(el, null);\n                        var tm = st.getPropertyValue(\"-webkit-transform\") || st.getPropertyValue(\"-moz-transform\") || st.getPropertyValue(\"-ms-transform\") || st.getPropertyValue(\"-o-transform\") || st.getPropertyValue(\"transform\") || \"none\";\n                        if (tm !== \"none\") {\n                            return tm.split(\"(\")[1].split(\")\")[0].split(\",\");\n                        }\n                        return 0;\n                    };\n                    Zoom.prototype.getCurrentRotation = function(el) {\n                        if (!el) {\n                            return 0;\n                        }\n                        var values = this.getCurrentTransform(el);\n                        if (values) {\n                            return Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\n                        // If you want rotate in 360\n                        //return (angle < 0 ? angle + 360 : angle);\n                        }\n                        return 0;\n                    };\n                    // Reset zoom effect\n                    Zoom.prototype.resetZoom = function() {\n                        utils.removeClass(this.core.outer, \"lg-zoomed\");\n                        for(var i = 0; i < this.core.___slide.length; i++){\n                            if (this.core.___slide[i].querySelector(\".lg-img-wrap\")) {\n                                this.core.___slide[i].querySelector(\".lg-img-wrap\").removeAttribute(\"style\");\n                                this.core.___slide[i].querySelector(\".lg-img-wrap\").removeAttribute(\"data-x\");\n                                this.core.___slide[i].querySelector(\".lg-img-wrap\").removeAttribute(\"data-y\");\n                            }\n                        }\n                        for(var j = 0; j < this.core.___slide.length; j++){\n                            if (this.core.___slide[j].querySelector(\".lg-image\")) {\n                                this.core.___slide[j].querySelector(\".lg-image\").removeAttribute(\"style\");\n                                this.core.___slide[j].querySelector(\".lg-image\").removeAttribute(\"data-scale\");\n                            }\n                        }\n                        // Reset pagx pagy values to center\n                        this.pageX = window.innerWidth / 2;\n                        this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n                    };\n                    Zoom.prototype.zoomSwipe = function() {\n                        var _this = this;\n                        var startCoords = {};\n                        var endCoords = {};\n                        var isMoved = false;\n                        // Allow x direction drag\n                        var allowX = false;\n                        // Allow Y direction drag\n                        var allowY = false;\n                        var rotateValue = 0;\n                        var rotateEl;\n                        for(var i = 0; i < _this.core.___slide.length; i++){\n                            /*jshint loopfunc: true */ utils.on(_this.core.___slide[i], \"touchstart.lg\", function(e) {\n                                if (utils.hasClass(_this.core.outer, \"lg-zoomed\")) {\n                                    var $image = _this.core.___slide[_this.core.index].querySelector(\".lg-object\");\n                                    rotateEl = _this.core.___slide[_this.core.index].querySelector(\".lg-img-rotate\");\n                                    rotateValue = _this.getCurrentRotation(rotateEl);\n                                    var dragAllowedAxises = _this.getDragAllowedAxises($image, Math.abs(rotateValue));\n                                    allowY = dragAllowedAxises.allowY;\n                                    allowX = dragAllowedAxises.allowX;\n                                    if (allowX || allowY) {\n                                        e.preventDefault();\n                                        startCoords = _this.getSwipeCords(e, Math.abs(rotateValue));\n                                    }\n                                }\n                            });\n                        }\n                        for(var j = 0; j < _this.core.___slide.length; j++){\n                            /*jshint loopfunc: true */ utils.on(_this.core.___slide[j], \"touchmove.lg\", function(e) {\n                                if (utils.hasClass(_this.core.outer, \"lg-zoomed\")) {\n                                    var _el = _this.core.___slide[_this.core.index].querySelector(\".lg-img-wrap\");\n                                    var distanceX;\n                                    var distanceY;\n                                    e.preventDefault();\n                                    isMoved = true;\n                                    endCoords = _this.getSwipeCords(e, Math.abs(rotateValue));\n                                    // reset opacity and transition duration\n                                    utils.addClass(_this.core.outer, \"lg-zoom-dragging\");\n                                    if (allowY) {\n                                        distanceY = -Math.abs(_el.getAttribute(\"data-y\")) + (endCoords.y - startCoords.y) * _this.getModifier(rotateValue, \"Y\", rotateEl);\n                                    } else {\n                                        distanceY = -Math.abs(_el.getAttribute(\"data-y\"));\n                                    }\n                                    if (allowX) {\n                                        distanceX = -Math.abs(_el.getAttribute(\"data-x\")) + (endCoords.x - startCoords.x) * _this.getModifier(rotateValue, \"X\", rotateEl);\n                                    } else {\n                                        distanceX = -Math.abs(_el.getAttribute(\"data-x\"));\n                                    }\n                                    if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n                                        if (_this.core.s.useLeftForZoom) {\n                                            _el.style.left = distanceX + \"px\";\n                                            _el.style.top = distanceY + \"px\";\n                                        } else {\n                                            utils.setVendor(_el, \"Transform\", \"translate3d(\" + distanceX + \"px, \" + distanceY + \"px, 0)\");\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        for(var k = 0; k < _this.core.___slide.length; k++){\n                            /*jshint loopfunc: true */ utils.on(_this.core.___slide[k], \"touchend.lg\", function() {\n                                if (utils.hasClass(_this.core.outer, \"lg-zoomed\")) {\n                                    if (isMoved) {\n                                        isMoved = false;\n                                        utils.removeClass(_this.core.outer, \"lg-zoom-dragging\");\n                                        _this.touchendZoom(startCoords, endCoords, allowX, allowY, rotateValue);\n                                    }\n                                }\n                            });\n                        }\n                    };\n                    Zoom.prototype.zoomDrag = function() {\n                        var _this = this;\n                        var startCoords = {};\n                        var endCoords = {};\n                        var isDraging = false;\n                        var isMoved = false;\n                        // Allow x direction drag\n                        var allowX = false;\n                        // Allow Y direction drag\n                        var allowY = false;\n                        var rotateValue = 0;\n                        var rotateEl;\n                        for(var i = 0; i < _this.core.___slide.length; i++){\n                            /*jshint loopfunc: true */ utils.on(_this.core.___slide[i], \"mousedown.lgzoom\", function(e) {\n                                // execute only on .lg-object\n                                var $image = _this.core.___slide[_this.core.index].querySelector(\".lg-object\");\n                                rotateEl = _this.core.___slide[_this.core.index].querySelector(\".lg-img-rotate\");\n                                rotateValue = _this.getCurrentRotation(rotateEl);\n                                var dragAllowedAxises = _this.getDragAllowedAxises($image, Math.abs(rotateValue));\n                                allowY = dragAllowedAxises.allowY;\n                                allowX = dragAllowedAxises.allowX;\n                                if (utils.hasClass(_this.core.outer, \"lg-zoomed\")) {\n                                    if (utils.hasClass(e.target, \"lg-object\") && (allowX || allowY)) {\n                                        e.preventDefault();\n                                        startCoords = _this.getDragCords(e, Math.abs(rotateValue));\n                                        isDraging = true;\n                                        // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                                        _this.core.outer.scrollLeft += 1;\n                                        _this.core.outer.scrollLeft -= 1;\n                                        utils.removeClass(_this.core.outer, \"lg-grab\");\n                                        utils.addClass(_this.core.outer, \"lg-grabbing\");\n                                    }\n                                }\n                            });\n                        }\n                        utils.on(window, \"mousemove.lgzoom\", function(e) {\n                            if (isDraging) {\n                                var _el = _this.core.___slide[_this.core.index].querySelector(\".lg-img-wrap\");\n                                var distanceX;\n                                var distanceY;\n                                isMoved = true;\n                                endCoords = _this.getDragCords(e, Math.abs(rotateValue));\n                                // reset opacity and transition duration\n                                utils.addClass(_this.core.outer, \"lg-zoom-dragging\");\n                                if (allowY) {\n                                    distanceY = -Math.abs(_el.getAttribute(\"data-y\")) + (endCoords.y - startCoords.y) * _this.getModifier(rotateValue, \"Y\", rotateEl);\n                                } else {\n                                    distanceY = -Math.abs(_el.getAttribute(\"data-y\"));\n                                }\n                                if (allowX) {\n                                    distanceX = -Math.abs(_el.getAttribute(\"data-x\")) + (endCoords.x - startCoords.x) * _this.getModifier(rotateValue, \"X\", rotateEl);\n                                } else {\n                                    distanceX = -Math.abs(_el.getAttribute(\"data-x\"));\n                                }\n                                if (_this.core.s.useLeftForZoom) {\n                                    _el.style.left = distanceX + \"px\";\n                                    _el.style.top = distanceY + \"px\";\n                                } else {\n                                    utils.setVendor(_el, \"Transform\", \"translate3d(\" + distanceX + \"px, \" + distanceY + \"px, 0)\");\n                                }\n                            }\n                        });\n                        utils.on(window, \"mouseup.lgzoom\", function(e) {\n                            if (isDraging) {\n                                isDraging = false;\n                                utils.removeClass(_this.core.outer, \"lg-zoom-dragging\");\n                                // Fix for chrome mouse move on click\n                                if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {\n                                    endCoords = _this.getDragCords(e, Math.abs(rotateValue));\n                                    _this.touchendZoom(startCoords, endCoords, allowX, allowY, rotateValue);\n                                }\n                                isMoved = false;\n                            }\n                            utils.removeClass(_this.core.outer, \"lg-grabbing\");\n                            utils.addClass(_this.core.outer, \"lg-grab\");\n                        });\n                    };\n                    Zoom.prototype.touchendZoom = function(startCoords, endCoords, allowX, allowY, rotateValue) {\n                        var _this = this;\n                        var _el = _this.core.___slide[_this.core.index].querySelector(\".lg-img-wrap\");\n                        var image = _this.core.___slide[_this.core.index].querySelector(\".lg-object\");\n                        var rotateEl = _this.core.___slide[_this.core.index].querySelector(\".lg-img-rotate\");\n                        var distanceX = -Math.abs(_el.getAttribute(\"data-x\")) + (endCoords.x - startCoords.x) * _this.getModifier(rotateValue, \"X\", rotateEl);\n                        var distanceY = -Math.abs(_el.getAttribute(\"data-y\")) + (endCoords.y - startCoords.y) * _this.getModifier(rotateValue, \"Y\", rotateEl);\n                        var possibleDragCords = _this.getPossibleDragCords(image, Math.abs(rotateValue));\n                        if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n                            if (allowY) {\n                                if (distanceY <= -possibleDragCords.maxY) {\n                                    distanceY = -possibleDragCords.maxY;\n                                } else if (distanceY >= -possibleDragCords.minY) {\n                                    distanceY = -possibleDragCords.minY;\n                                }\n                            }\n                            if (allowX) {\n                                if (distanceX <= -possibleDragCords.maxX) {\n                                    distanceX = -possibleDragCords.maxX;\n                                } else if (distanceX >= -possibleDragCords.minX) {\n                                    distanceX = -possibleDragCords.minX;\n                                }\n                            }\n                            if (allowY) {\n                                _el.setAttribute(\"data-y\", Math.abs(distanceY));\n                            } else {\n                                distanceY = -Math.abs(_el.getAttribute(\"data-y\"));\n                            }\n                            if (allowX) {\n                                _el.setAttribute(\"data-x\", Math.abs(distanceX));\n                            } else {\n                                distanceX = -Math.abs(_el.getAttribute(\"data-x\"));\n                            }\n                            if (_this.core.s.useLeftForZoom) {\n                                _el.style.left = distanceX + \"px\";\n                                _el.style.top = distanceY + \"px\";\n                            } else {\n                                utils.setVendor(_el, \"Transform\", \"translate3d(\" + distanceX + \"px, \" + distanceY + \"px, 0)\");\n                            }\n                        }\n                    };\n                    Zoom.prototype.destroy = function() {\n                        var _this = this;\n                        // Unbind all events added by lightGallery zoom plugin\n                        utils.off(_this.core.el, \".lgzoom\");\n                        utils.off(window, \".lgzoom\");\n                        for(var i = 0; i < _this.core.___slide.length; i++){\n                            utils.off(_this.core.___slide[i], \".lgzoom\");\n                        }\n                        utils.off(_this.core.el, \".lgtmzoom\");\n                        _this.resetZoom();\n                        clearTimeout(_this.zoomabletimeout);\n                        _this.zoomabletimeout = false;\n                    };\n                    window.lgModules.zoom = Zoom;\n                });\n            },\n            {}\n        ]\n    }, {}, [\n        1\n    ])(1);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lg-zoom.js/dist/lg-zoom.js\n");

/***/ })

};
;