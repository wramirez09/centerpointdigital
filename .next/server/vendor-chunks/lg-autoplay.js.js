"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lg-autoplay.js";
exports.ids = ["vendor-chunks/lg-autoplay.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/lg-autoplay.js/dist/lg-autoplay.js":
/*!*********************************************************!*\
  !*** ./node_modules/lg-autoplay.js/dist/lg-autoplay.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n/**!\n * lg-autoplay.js | 1.2.0 | May 20th 2020\n * http://sachinchoolur.github.io/lg-autoplay.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */ (function(f) {\n    if (true) {\n        module.exports = f();\n    } else { var g; }\n})(function() {\n    var define1, module1, exports1;\n    return (function() {\n        function r(e, n, t) {\n            function o(i, f) {\n                if (!n[i]) {\n                    if (!e[i]) {\n                        var c = undefined;\n                        if (!f && c) return require(i, !0);\n                        if (u) return u(i, !0);\n                        var a = new Error(\"Cannot find module '\" + i + \"'\");\n                        throw a.code = \"MODULE_NOT_FOUND\", a;\n                    }\n                    var p = n[i] = {\n                        exports: {}\n                    };\n                    e[i][0].call(p.exports, function(r) {\n                        var n = e[i][1][r];\n                        return o(n || r);\n                    }, p, p.exports, r, e, n, t);\n                }\n                return n[i].exports;\n            }\n            for(var u = undefined, i = 0; i < t.length; i++)o(t[i]);\n            return o;\n        }\n        return r;\n    })()({\n        1: [\n            function(require1, module1, exports1) {\n                (function(global1, factory) {\n                    if (typeof define1 === \"function\" && define1.amd) {\n                        define1([], factory);\n                    } else if (typeof exports1 !== \"undefined\") {\n                        factory();\n                    } else {\n                        var mod = {\n                            exports: {}\n                        };\n                        factory();\n                        global1.lgAutoplay = mod.exports;\n                    }\n                })(this, function() {\n                    \"use strict\";\n                    var _extends = Object.assign || function(target) {\n                        for(var i = 1; i < arguments.length; i++){\n                            var source = arguments[i];\n                            for(var key in source){\n                                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                                    target[key] = source[key];\n                                }\n                            }\n                        }\n                        return target;\n                    };\n                    var autoplayDefaults = {\n                        autoplay: false,\n                        pause: 5000,\n                        progressBar: true,\n                        fourceAutoplay: false,\n                        autoplayControls: true,\n                        appendAutoplayControlsTo: \".lg-toolbar\"\n                    };\n                    /**\n     * Creates the autoplay plugin.\n     * @param {object} element - lightGallery element\n     */ var Autoplay = function Autoplay(element) {\n                        this.el = element;\n                        this.core = window.lgData[this.el.getAttribute(\"lg-uid\")];\n                        // Execute only if items are above 1\n                        if (this.core.items.length < 2) {\n                            return false;\n                        }\n                        this.core.s = _extends({}, autoplayDefaults, this.core.s);\n                        this.interval = false;\n                        // Identify if slide happened from autoplay\n                        this.fromAuto = true;\n                        // Identify if autoplay canceled from touch/drag\n                        this.canceledOnTouch = false;\n                        // save fourceautoplay value\n                        this.fourceAutoplayTemp = this.core.s.fourceAutoplay;\n                        // do not allow progress bar if browser does not support css3 transitions\n                        if (!this.core.doCss()) {\n                            this.core.s.progressBar = false;\n                        }\n                        this.init();\n                        return this;\n                    };\n                    Autoplay.prototype.init = function() {\n                        var _this = this;\n                        // append autoplay controls\n                        if (_this.core.s.autoplayControls) {\n                            _this.controls();\n                        }\n                        // Create progress bar\n                        if (_this.core.s.progressBar) {\n                            _this.core.outer.querySelector(\".lg\").insertAdjacentHTML(\"beforeend\", '<div class=\"lg-progress-bar\"><div class=\"lg-progress\"></div></div>');\n                        }\n                        // set progress\n                        _this.progress();\n                        // Start autoplay\n                        if (_this.core.s.autoplay) {\n                            _this.startlAuto();\n                        }\n                        // cancel interval on touchstart and dragstart\n                        utils.on(_this.el, \"onDragstart.lgtm touchstart.lgtm\", function() {\n                            if (_this.interval) {\n                                _this.cancelAuto();\n                                _this.canceledOnTouch = true;\n                            }\n                        });\n                        // restore autoplay if autoplay canceled from touchstart / dragstart\n                        utils.on(_this.el, \"onDragend.lgtm touchend.lgtm onSlideClick.lgtm\", function() {\n                            if (!_this.interval && _this.canceledOnTouch) {\n                                _this.startlAuto();\n                                _this.canceledOnTouch = false;\n                            }\n                        });\n                    };\n                    Autoplay.prototype.progress = function() {\n                        var _this = this;\n                        var _progressBar;\n                        var _progress;\n                        utils.on(_this.el, \"onBeforeSlide.lgtm\", function() {\n                            // start progress bar animation\n                            if (_this.core.s.progressBar && _this.fromAuto) {\n                                _progressBar = _this.core.outer.querySelector(\".lg-progress-bar\");\n                                _progress = _this.core.outer.querySelector(\".lg-progress\");\n                                if (_this.interval) {\n                                    _progress.removeAttribute(\"style\");\n                                    utils.removeClass(_progressBar, \"lg-start\");\n                                    setTimeout(function() {\n                                        utils.setVendor(_progress, \"Transition\", \"width \" + (_this.core.s.speed + _this.core.s.pause) + \"ms ease 0s\");\n                                        utils.addClass(_progressBar, \"lg-start\");\n                                    }, 20);\n                                }\n                            }\n                            // Remove setinterval if slide is triggered manually and fourceautoplay is false\n                            if (!_this.fromAuto && !_this.core.s.fourceAutoplay) {\n                                _this.cancelAuto();\n                            }\n                            _this.fromAuto = false;\n                        });\n                    };\n                    // Manage autoplay via play/stop buttons\n                    Autoplay.prototype.controls = function() {\n                        var _this = this;\n                        var _html = '<button aria-label=\"Toggle autoplay\" class=\"lg-autoplay-button lg-icon\"></button>';\n                        // Append autoplay controls\n                        _this.core.outer.querySelector(this.core.s.appendAutoplayControlsTo).insertAdjacentHTML(\"beforeend\", _html);\n                        utils.on(_this.core.outer.querySelector(\".lg-autoplay-button\"), \"click.lg\", function() {\n                            if (utils.hasClass(_this.core.outer, \"lg-show-autoplay\")) {\n                                _this.cancelAuto();\n                                _this.core.s.fourceAutoplay = false;\n                            } else {\n                                if (!_this.interval) {\n                                    _this.startlAuto();\n                                    _this.core.s.fourceAutoplay = _this.fourceAutoplayTemp;\n                                }\n                            }\n                        });\n                    };\n                    // Autostart gallery\n                    Autoplay.prototype.startlAuto = function() {\n                        var _this = this;\n                        utils.setVendor(_this.core.outer.querySelector(\".lg-progress\"), \"Transition\", \"width \" + (_this.core.s.speed + _this.core.s.pause) + \"ms ease 0s\");\n                        utils.addClass(_this.core.outer, \"lg-show-autoplay\");\n                        utils.addClass(_this.core.outer.querySelector(\".lg-progress-bar\"), \"lg-start\");\n                        _this.interval = setInterval(function() {\n                            if (_this.core.index + 1 < _this.core.items.length) {\n                                _this.core.index++;\n                            } else {\n                                _this.core.index = 0;\n                            }\n                            _this.fromAuto = true;\n                            _this.core.slide(_this.core.index, false, false);\n                        }, _this.core.s.speed + _this.core.s.pause);\n                    };\n                    // cancel Autostart\n                    Autoplay.prototype.cancelAuto = function() {\n                        clearInterval(this.interval);\n                        this.interval = false;\n                        if (this.core.outer.querySelector(\".lg-progress\")) {\n                            this.core.outer.querySelector(\".lg-progress\").removeAttribute(\"style\");\n                        }\n                        utils.removeClass(this.core.outer, \"lg-show-autoplay\");\n                        utils.removeClass(this.core.outer.querySelector(\".lg-progress-bar\"), \"lg-start\");\n                    };\n                    Autoplay.prototype.destroy = function() {\n                        this.cancelAuto();\n                        if (this.core.outer.querySelector(\".lg-progress-bar\")) {\n                            this.core.outer.querySelector(\".lg-progress-bar\").parentNode.removeChild(this.core.outer.querySelector(\".lg-progress-bar\"));\n                        }\n                    };\n                    window.lgModules.autoplay = Autoplay;\n                });\n            },\n            {}\n        ]\n    }, {}, [\n        1\n    ])(1);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGctYXV0b3BsYXkuanMvZGlzdC9sZy1hdXRvcGxheS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0NBS0MsR0FBRyxVQUFTQSxDQUFDO0lBQUUsSUFBRyxJQUFzRCxFQUFDO1FBQUNFLE9BQU9ELE9BQU8sR0FBQ0Q7SUFBRyxPQUFNLFVBQW1PO0FBQUEsR0FBRztJQUFXLElBQUlHLFNBQU9ELFNBQU9EO0lBQVEsT0FBTyxDQUFDO1FBQVcsU0FBU1MsRUFBRUMsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUM7WUFBRSxTQUFTQyxFQUFFQyxDQUFDLEVBQUNmLENBQUM7Z0JBQUUsSUFBRyxDQUFDWSxDQUFDLENBQUNHLEVBQUUsRUFBQztvQkFBQyxJQUFHLENBQUNKLENBQUMsQ0FBQ0ksRUFBRSxFQUFDO3dCQUFDLElBQUlDLElBQUUsU0FBbUNDO3dCQUFDLElBQUcsQ0FBQ2pCLEtBQUdnQixHQUFFLE9BQU9BLE9BQUNBLENBQUNELEdBQUUsQ0FBQzt3QkFBRyxJQUFHRyxHQUFFLE9BQU9BLEVBQUVILEdBQUUsQ0FBQzt3QkFBRyxJQUFJSSxJQUFFLElBQUlDLE1BQU0seUJBQXVCTCxJQUFFO3dCQUFLLE1BQU1JLEVBQUVFLElBQUksR0FBQyxvQkFBbUJGO29CQUFDO29CQUFDLElBQUlHLElBQUVWLENBQUMsQ0FBQ0csRUFBRSxHQUFDO3dCQUFDZCxTQUFRLENBQUM7b0JBQUM7b0JBQUVVLENBQUMsQ0FBQ0ksRUFBRSxDQUFDLEVBQUUsQ0FBQ1EsSUFBSSxDQUFDRCxFQUFFckIsT0FBTyxFQUFDLFNBQVNTLENBQUM7d0JBQUUsSUFBSUUsSUFBRUQsQ0FBQyxDQUFDSSxFQUFFLENBQUMsRUFBRSxDQUFDTCxFQUFFO3dCQUFDLE9BQU9JLEVBQUVGLEtBQUdGO29CQUFFLEdBQUVZLEdBQUVBLEVBQUVyQixPQUFPLEVBQUNTLEdBQUVDLEdBQUVDLEdBQUVDO2dCQUFFO2dCQUFDLE9BQU9ELENBQUMsQ0FBQ0csRUFBRSxDQUFDZCxP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QSxRQUFRLEdBQUc7d0JBQ2hCLElBQUksSUFBSSxDQUFDTCxJQUFJLENBQUNhLEtBQUssQ0FBQ0MsYUFBYSxDQUFDLGlCQUFpQjs0QkFDL0MsSUFBSSxDQUFDZCxJQUFJLENBQUNhLEtBQUssQ0FBQ0MsYUFBYSxDQUFDLGdCQUFnQlMsZUFBZSxDQUFDO3dCQUNsRTt3QkFFQUwsTUFBTU0sV0FBVyxDQUFDLElBQUksQ0FBQ3hCLElBQUksQ0FBQ2EsS0FBSyxFQUFFO3dCQUNuQ0ssTUFBTU0sV0FBVyxDQUFDLElBQUksQ0FBQ3hCLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxhQUFhLENBQUMscUJBQXFCO29CQUN6RTtvQkFFQWpCLFNBQVNULFNBQVMsQ0FBQytDLE9BQU8sR0FBRzt3QkFFekIsSUFBSSxDQUFDZixVQUFVO3dCQUNmLElBQUksSUFBSSxDQUFDcEIsSUFBSSxDQUFDYSxLQUFLLENBQUNDLGFBQWEsQ0FBQyxxQkFBcUI7NEJBQ25ELElBQUksQ0FBQ2QsSUFBSSxDQUFDYSxLQUFLLENBQUNDLGFBQWEsQ0FBQyxvQkFBb0JzQixVQUFVLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUNyQyxJQUFJLENBQUNhLEtBQUssQ0FBQ0MsYUFBYSxDQUFDO3dCQUMzRztvQkFDSjtvQkFFQXZELE9BQU8rRSxTQUFTLENBQUMvQyxRQUFRLEdBQUdNO2dCQUNoQztZQUVBO1lBQUUsQ0FBQztTQUFFO0lBQUEsR0FBRSxDQUFDLEdBQUU7UUFBQztLQUFFLEVBQUU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2xnLWF1dG9wbGF5LmpzL2Rpc3QvbGctYXV0b3BsYXkuanM/ZmQxOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiohXG4gKiBsZy1hdXRvcGxheS5qcyB8IDEuMi4wIHwgTWF5IDIwdGggMjAyMFxuICogaHR0cDovL3NhY2hpbmNob29sdXIuZ2l0aHViLmlvL2xnLWF1dG9wbGF5LmpzXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgU2FjaGluIE47IFxuICogQGxpY2Vuc2UgR1BMdjMgXG4gKi8oZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5MZ0F1dG9wbGF5ID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2QgPSB7XG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICBmYWN0b3J5KCk7XG4gICAgICAgIGdsb2JhbC5sZ0F1dG9wbGF5ID0gbW9kLmV4cG9ydHM7XG4gICAgfVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuXG4gICAgdmFyIGF1dG9wbGF5RGVmYXVsdHMgPSB7XG4gICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgcGF1c2U6IDUwMDAsXG4gICAgICAgIHByb2dyZXNzQmFyOiB0cnVlLFxuICAgICAgICBmb3VyY2VBdXRvcGxheTogZmFsc2UsXG4gICAgICAgIGF1dG9wbGF5Q29udHJvbHM6IHRydWUsXG4gICAgICAgIGFwcGVuZEF1dG9wbGF5Q29udHJvbHNUbzogJy5sZy10b29sYmFyJ1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBhdXRvcGxheSBwbHVnaW4uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgLSBsaWdodEdhbGxlcnkgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBBdXRvcGxheSA9IGZ1bmN0aW9uIEF1dG9wbGF5KGVsZW1lbnQpIHtcblxuICAgICAgICB0aGlzLmVsID0gZWxlbWVudDtcblxuICAgICAgICB0aGlzLmNvcmUgPSB3aW5kb3cubGdEYXRhW3RoaXMuZWwuZ2V0QXR0cmlidXRlKCdsZy11aWQnKV07XG5cbiAgICAgICAgLy8gRXhlY3V0ZSBvbmx5IGlmIGl0ZW1zIGFyZSBhYm92ZSAxXG4gICAgICAgIGlmICh0aGlzLmNvcmUuaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb3JlLnMgPSBfZXh0ZW5kcyh7fSwgYXV0b3BsYXlEZWZhdWx0cywgdGhpcy5jb3JlLnMpO1xuICAgICAgICB0aGlzLmludGVydmFsID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWRlbnRpZnkgaWYgc2xpZGUgaGFwcGVuZWQgZnJvbSBhdXRvcGxheVxuICAgICAgICB0aGlzLmZyb21BdXRvID0gdHJ1ZTtcblxuICAgICAgICAvLyBJZGVudGlmeSBpZiBhdXRvcGxheSBjYW5jZWxlZCBmcm9tIHRvdWNoL2RyYWdcbiAgICAgICAgdGhpcy5jYW5jZWxlZE9uVG91Y2ggPSBmYWxzZTtcblxuICAgICAgICAvLyBzYXZlIGZvdXJjZWF1dG9wbGF5IHZhbHVlXG4gICAgICAgIHRoaXMuZm91cmNlQXV0b3BsYXlUZW1wID0gdGhpcy5jb3JlLnMuZm91cmNlQXV0b3BsYXk7XG5cbiAgICAgICAgLy8gZG8gbm90IGFsbG93IHByb2dyZXNzIGJhciBpZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY3NzMyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAoIXRoaXMuY29yZS5kb0NzcygpKSB7XG4gICAgICAgICAgICB0aGlzLmNvcmUucy5wcm9ncmVzc0JhciA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIEF1dG9wbGF5LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8vIGFwcGVuZCBhdXRvcGxheSBjb250cm9sc1xuICAgICAgICBpZiAoX3RoaXMuY29yZS5zLmF1dG9wbGF5Q29udHJvbHMpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbnRyb2xzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgcHJvZ3Jlc3MgYmFyXG4gICAgICAgIGlmIChfdGhpcy5jb3JlLnMucHJvZ3Jlc3NCYXIpIHtcbiAgICAgICAgICAgIF90aGlzLmNvcmUub3V0ZXIucXVlcnlTZWxlY3RvcignLmxnJykuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPGRpdiBjbGFzcz1cImxnLXByb2dyZXNzLWJhclwiPjxkaXYgY2xhc3M9XCJsZy1wcm9ncmVzc1wiPjwvZGl2PjwvZGl2PicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IHByb2dyZXNzXG4gICAgICAgIF90aGlzLnByb2dyZXNzKCk7XG5cbiAgICAgICAgLy8gU3RhcnQgYXV0b3BsYXlcbiAgICAgICAgaWYgKF90aGlzLmNvcmUucy5hdXRvcGxheSkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRsQXV0bygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FuY2VsIGludGVydmFsIG9uIHRvdWNoc3RhcnQgYW5kIGRyYWdzdGFydFxuICAgICAgICB1dGlscy5vbihfdGhpcy5lbCwgJ29uRHJhZ3N0YXJ0LmxndG0gdG91Y2hzdGFydC5sZ3RtJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2FuY2VsQXV0bygpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNhbmNlbGVkT25Ub3VjaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlc3RvcmUgYXV0b3BsYXkgaWYgYXV0b3BsYXkgY2FuY2VsZWQgZnJvbSB0b3VjaHN0YXJ0IC8gZHJhZ3N0YXJ0XG4gICAgICAgIHV0aWxzLm9uKF90aGlzLmVsLCAnb25EcmFnZW5kLmxndG0gdG91Y2hlbmQubGd0bSBvblNsaWRlQ2xpY2subGd0bScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaW50ZXJ2YWwgJiYgX3RoaXMuY2FuY2VsZWRPblRvdWNoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhcnRsQXV0bygpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNhbmNlbGVkT25Ub3VjaCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQXV0b3BsYXkucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfcHJvZ3Jlc3NCYXI7XG4gICAgICAgIHZhciBfcHJvZ3Jlc3M7XG5cbiAgICAgICAgdXRpbHMub24oX3RoaXMuZWwsICdvbkJlZm9yZVNsaWRlLmxndG0nLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIHN0YXJ0IHByb2dyZXNzIGJhciBhbmltYXRpb25cbiAgICAgICAgICAgIGlmIChfdGhpcy5jb3JlLnMucHJvZ3Jlc3NCYXIgJiYgX3RoaXMuZnJvbUF1dG8pIHtcbiAgICAgICAgICAgICAgICBfcHJvZ3Jlc3NCYXIgPSBfdGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IoJy5sZy1wcm9ncmVzcy1iYXInKTtcbiAgICAgICAgICAgICAgICBfcHJvZ3Jlc3MgPSBfdGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IoJy5sZy1wcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgICAgICBfcHJvZ3Jlc3MucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVDbGFzcyhfcHJvZ3Jlc3NCYXIsICdsZy1zdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnNldFZlbmRvcihfcHJvZ3Jlc3MsICdUcmFuc2l0aW9uJywgJ3dpZHRoICcgKyAoX3RoaXMuY29yZS5zLnNwZWVkICsgX3RoaXMuY29yZS5zLnBhdXNlKSArICdtcyBlYXNlIDBzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5hZGRDbGFzcyhfcHJvZ3Jlc3NCYXIsICdsZy1zdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgc2V0aW50ZXJ2YWwgaWYgc2xpZGUgaXMgdHJpZ2dlcmVkIG1hbnVhbGx5IGFuZCBmb3VyY2VhdXRvcGxheSBpcyBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5mcm9tQXV0byAmJiAhX3RoaXMuY29yZS5zLmZvdXJjZUF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2FuY2VsQXV0bygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5mcm9tQXV0byA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gTWFuYWdlIGF1dG9wbGF5IHZpYSBwbGF5L3N0b3AgYnV0dG9uc1xuICAgIEF1dG9wbGF5LnByb3RvdHlwZS5jb250cm9scyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9odG1sID0gJzxidXR0b24gYXJpYS1sYWJlbD1cIlRvZ2dsZSBhdXRvcGxheVwiIGNsYXNzPVwibGctYXV0b3BsYXktYnV0dG9uIGxnLWljb25cIj48L2J1dHRvbj4nO1xuXG4gICAgICAgIC8vIEFwcGVuZCBhdXRvcGxheSBjb250cm9sc1xuICAgICAgICBfdGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IodGhpcy5jb3JlLnMuYXBwZW5kQXV0b3BsYXlDb250cm9sc1RvKS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIF9odG1sKTtcblxuICAgICAgICB1dGlscy5vbihfdGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IoJy5sZy1hdXRvcGxheS1idXR0b24nKSwgJ2NsaWNrLmxnJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHV0aWxzLmhhc0NsYXNzKF90aGlzLmNvcmUub3V0ZXIsICdsZy1zaG93LWF1dG9wbGF5JykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jYW5jZWxBdXRvKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29yZS5zLmZvdXJjZUF1dG9wbGF5ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RhcnRsQXV0bygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLnMuZm91cmNlQXV0b3BsYXkgPSBfdGhpcy5mb3VyY2VBdXRvcGxheVRlbXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQXV0b3N0YXJ0IGdhbGxlcnlcbiAgICBBdXRvcGxheS5wcm90b3R5cGUuc3RhcnRsQXV0byA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB1dGlscy5zZXRWZW5kb3IoX3RoaXMuY29yZS5vdXRlci5xdWVyeVNlbGVjdG9yKCcubGctcHJvZ3Jlc3MnKSwgJ1RyYW5zaXRpb24nLCAnd2lkdGggJyArIChfdGhpcy5jb3JlLnMuc3BlZWQgKyBfdGhpcy5jb3JlLnMucGF1c2UpICsgJ21zIGVhc2UgMHMnKTtcbiAgICAgICAgdXRpbHMuYWRkQ2xhc3MoX3RoaXMuY29yZS5vdXRlciwgJ2xnLXNob3ctYXV0b3BsYXknKTtcbiAgICAgICAgdXRpbHMuYWRkQ2xhc3MoX3RoaXMuY29yZS5vdXRlci5xdWVyeVNlbGVjdG9yKCcubGctcHJvZ3Jlc3MtYmFyJyksICdsZy1zdGFydCcpO1xuXG4gICAgICAgIF90aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmNvcmUuaW5kZXggKyAxIDwgX3RoaXMuY29yZS5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb3JlLmluZGV4Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvcmUuaW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5mcm9tQXV0byA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5jb3JlLnNsaWRlKF90aGlzLmNvcmUuaW5kZXgsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH0sIF90aGlzLmNvcmUucy5zcGVlZCArIF90aGlzLmNvcmUucy5wYXVzZSk7XG4gICAgfTtcblxuICAgIC8vIGNhbmNlbCBBdXRvc3RhcnRcbiAgICBBdXRvcGxheS5wcm90b3R5cGUuY2FuY2VsQXV0byA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IoJy5sZy1wcm9ncmVzcycpKSB7XG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIucXVlcnlTZWxlY3RvcignLmxnLXByb2dyZXNzJykucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXRpbHMucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLm91dGVyLCAnbGctc2hvdy1hdXRvcGxheScpO1xuICAgICAgICB1dGlscy5yZW1vdmVDbGFzcyh0aGlzLmNvcmUub3V0ZXIucXVlcnlTZWxlY3RvcignLmxnLXByb2dyZXNzLWJhcicpLCAnbGctc3RhcnQnKTtcbiAgICB9O1xuXG4gICAgQXV0b3BsYXkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdGhpcy5jYW5jZWxBdXRvKCk7XG4gICAgICAgIGlmICh0aGlzLmNvcmUub3V0ZXIucXVlcnlTZWxlY3RvcignLmxnLXByb2dyZXNzLWJhcicpKSB7XG4gICAgICAgICAgICB0aGlzLmNvcmUub3V0ZXIucXVlcnlTZWxlY3RvcignLmxnLXByb2dyZXNzLWJhcicpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jb3JlLm91dGVyLnF1ZXJ5U2VsZWN0b3IoJy5sZy1wcm9ncmVzcy1iYXInKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgd2luZG93LmxnTW9kdWxlcy5hdXRvcGxheSA9IEF1dG9wbGF5O1xufSk7XG5cbn0se31dfSx7fSxbMV0pKDEpXG59KTtcbiJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwiTGdBdXRvcGxheSIsInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiY2FsbCIsImxlbmd0aCIsImZhY3RvcnkiLCJtb2QiLCJsZ0F1dG9wbGF5IiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImF1dG9wbGF5RGVmYXVsdHMiLCJhdXRvcGxheSIsInBhdXNlIiwicHJvZ3Jlc3NCYXIiLCJmb3VyY2VBdXRvcGxheSIsImF1dG9wbGF5Q29udHJvbHMiLCJhcHBlbmRBdXRvcGxheUNvbnRyb2xzVG8iLCJBdXRvcGxheSIsImVsZW1lbnQiLCJlbCIsImNvcmUiLCJsZ0RhdGEiLCJnZXRBdHRyaWJ1dGUiLCJpdGVtcyIsInMiLCJpbnRlcnZhbCIsImZyb21BdXRvIiwiY2FuY2VsZWRPblRvdWNoIiwiZm91cmNlQXV0b3BsYXlUZW1wIiwiZG9Dc3MiLCJpbml0IiwiX3RoaXMiLCJjb250cm9scyIsIm91dGVyIiwicXVlcnlTZWxlY3RvciIsImluc2VydEFkamFjZW50SFRNTCIsInByb2dyZXNzIiwic3RhcnRsQXV0byIsInV0aWxzIiwib24iLCJjYW5jZWxBdXRvIiwiX3Byb2dyZXNzQmFyIiwiX3Byb2dyZXNzIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJzZXRUaW1lb3V0Iiwic2V0VmVuZG9yIiwic3BlZWQiLCJhZGRDbGFzcyIsIl9odG1sIiwiaGFzQ2xhc3MiLCJzZXRJbnRlcnZhbCIsImluZGV4Iiwic2xpZGUiLCJjbGVhckludGVydmFsIiwiZGVzdHJveSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImxnTW9kdWxlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lg-autoplay.js/dist/lg-autoplay.js\n");

/***/ })

};
;