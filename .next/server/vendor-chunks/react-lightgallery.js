"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-lightgallery";
exports.ids = ["vendor-chunks/react-lightgallery"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-lightgallery/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-lightgallery/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction e(e) {\n    return e && \"object\" == typeof e && \"default\" in e ? e.default : e;\n}\nfunction t(e) {\n    if (e && e.__esModule) return e;\n    var t = {};\n    return e && Object.keys(e).forEach(function(r) {\n        var n = Object.getOwnPropertyDescriptor(e, r);\n        Object.defineProperty(t, r, n.get ? n : {\n            enumerable: !0,\n            get: function() {\n                return e[r];\n            }\n        });\n    }), t.default = e, t;\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: !0\n}));\nvar r = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), n = e(r), o = e(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\")), i = e(__webpack_require__(/*! uniqid */ \"(ssr)/./node_modules/uniqid/index.js\")), l = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\"), s = __webpack_require__(/*! browser-or-node */ \"(ssr)/./node_modules/browser-or-node/lib/index.js\");\nfunction u(e) {\n    return (u = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(e) {\n        return typeof e;\n    } : function(e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n    })(e);\n}\nfunction c(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction a(e, t) {\n    for(var r = 0; r < t.length; r++){\n        var n = t[r];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n    }\n}\nfunction f(e, t, r) {\n    return t && a(e.prototype, t), r && a(e, r), e;\n}\nfunction p(e, t, r) {\n    return t in e ? Object.defineProperty(e, t, {\n        value: r,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[t] = r, e;\n}\nfunction y() {\n    return (y = Object.assign || function(e) {\n        for(var t = 1; t < arguments.length; t++){\n            var r = arguments[t];\n            for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n        }\n        return e;\n    }).apply(this, arguments);\n}\nfunction d(e, t) {\n    var r = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var n = Object.getOwnPropertySymbols(e);\n        t && (n = n.filter(function(t) {\n            return Object.getOwnPropertyDescriptor(e, t).enumerable;\n        })), r.push.apply(r, n);\n    }\n    return r;\n}\nfunction m(e) {\n    for(var t = 1; t < arguments.length; t++){\n        var r = null != arguments[t] ? arguments[t] : {};\n        t % 2 ? d(Object(r), !0).forEach(function(t) {\n            p(e, t, r[t]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : d(Object(r)).forEach(function(t) {\n            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));\n        });\n    }\n    return e;\n}\nfunction g(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n    e.prototype = Object.create(t && t.prototype, {\n        constructor: {\n            value: e,\n            writable: !0,\n            configurable: !0\n        }\n    }), t && v(e, t);\n}\nfunction b(e) {\n    return (b = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) {\n        return e.__proto__ || Object.getPrototypeOf(e);\n    })(e);\n}\nfunction v(e, t) {\n    return (v = Object.setPrototypeOf || function(e, t) {\n        return e.__proto__ = t, e;\n    })(e, t);\n}\nfunction h(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n}\nfunction S(e, t) {\n    return !t || \"object\" != typeof t && \"function\" != typeof t ? h(e) : t;\n}\nfunction j(e) {\n    var t = function() {\n        if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n        if (Reflect.construct.sham) return !1;\n        if (\"function\" == typeof Proxy) return !0;\n        try {\n            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;\n        } catch (e) {\n            return !1;\n        }\n    }();\n    return function() {\n        var r, n = b(e);\n        if (t) {\n            var o = b(this).constructor;\n            r = Reflect.construct(n, arguments, o);\n        } else r = n.apply(this, arguments);\n        return S(this, r);\n    };\n}\nfunction w(e) {\n    return function(e) {\n        if (Array.isArray(e)) return O(e);\n    }(e) || function(e) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n    }(e) || function(e, t) {\n        if (!e) return;\n        if (\"string\" == typeof e) return O(e, t);\n        var r = Object.prototype.toString.call(e).slice(8, -1);\n        \"Object\" === r && e.constructor && (r = e.constructor.name);\n        if (\"Map\" === r || \"Set\" === r) return Array.from(e);\n        if (\"Arguments\" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)) return O(e, t);\n    }(e) || function() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction O(e, t) {\n    (null == t || t > e.length) && (t = e.length);\n    for(var r = 0, n = new Array(t); r < t; r++)n[r] = e[r];\n    return n;\n}\nvar P = r.createContext(), _ = function(e) {\n    return \"react_lightgallery_\".concat(e);\n}, $ = function(e) {\n    g(o, r.Component);\n    var t = j(o);\n    function o() {\n        var e;\n        c(this, o);\n        for(var r = arguments.length, n = new Array(r), l = 0; l < r; l++)n[l] = arguments[l];\n        return p(h(e = t.call.apply(t, [\n            this\n        ].concat(n))), \"state\", {\n            id: i()\n        }), p(h(e), \"register\", function() {\n            var t = e.props, r = t.src, n = t.thumb, o = void 0 === n ? r : n, i = t.subHtml, l = void 0 === i ? \"\" : i, s = t.downloadUrl, u = void 0 === s ? \"\" : s;\n            e.context.registerPhoto(e.state.id, e.props.group, {\n                src: r,\n                thumb: o,\n                subHtml: l,\n                downloadUrl: u\n            });\n        }), p(h(e), \"unregister\", function() {\n            e.context.unregisterPhoto(e.state.id, e.props.group);\n        }), p(h(e), \"open\", function() {\n            e.context.openGallery(e.state.id, e.props.group);\n        }), e;\n    }\n    return f(o, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.register();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function() {\n                this.unregister();\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var e = this.props, t = e.itemClassName, r = void 0 === t ? _(\"item\") : t, o = e.children;\n                return n.createElement(\"div\", {\n                    className: r,\n                    onClick: this.open\n                }, o);\n            }\n        }\n    ]), o;\n}();\np($, \"propTypes\", {\n    children: o.any,\n    group: o.string.isRequired,\n    src: o.string.isRequired,\n    thumb: o.string,\n    subHtml: o.oneOfType([\n        o.string,\n        o.object\n    ]),\n    downloadUrl: o.string,\n    itemClassName: o.string\n}), p($, \"contextType\", P);\nvar x = function(e) {\n    var t = typeof e;\n    return null != e && (\"object\" == t || \"function\" == t);\n}, L = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction C(e, t) {\n    return e(t = {\n        exports: {}\n    }, t.exports), t.exports;\n}\nvar E = \"object\" == typeof L && L && L.Object === Object && L, M = \"object\" == typeof self && self && self.Object === Object && self, T = E || M || Function(\"return this\")(), U = function() {\n    return T.Date.now();\n}, G = T.Symbol, D = Object.prototype, N = D.hasOwnProperty, A = D.toString, B = G ? G.toStringTag : void 0;\nvar I = function(e) {\n    var t = N.call(e, B), r = e[B];\n    try {\n        e[B] = void 0;\n        var n = !0;\n    } catch (e) {}\n    var o = A.call(e);\n    return n && (t ? e[B] = r : delete e[B]), o;\n}, R = Object.prototype.toString;\nvar q = function(e) {\n    return R.call(e);\n}, F = G ? G.toStringTag : void 0;\nvar k = function(e) {\n    return null == e ? void 0 === e ? \"[object Undefined]\" : \"[object Null]\" : F && F in Object(e) ? I(e) : q(e);\n};\nvar z = function(e) {\n    return null != e && \"object\" == typeof e;\n};\nvar V = function(e) {\n    return \"symbol\" == typeof e || z(e) && \"[object Symbol]\" == k(e);\n}, W = /^\\s+|\\s+$/g, H = /^[-+]0x[0-9a-f]+$/i, J = /^0b[01]+$/i, Y = /^0o[0-7]+$/i, K = parseInt;\nvar Q = function(e) {\n    if (\"number\" == typeof e) return e;\n    if (V(e)) return NaN;\n    if (x(e)) {\n        var t = \"function\" == typeof e.valueOf ? e.valueOf() : e;\n        e = x(t) ? t + \"\" : t;\n    }\n    if (\"string\" != typeof e) return 0 === e ? e : +e;\n    e = e.replace(W, \"\");\n    var r = J.test(e);\n    return r || Y.test(e) ? K(e.slice(2), r ? 2 : 8) : H.test(e) ? NaN : +e;\n}, X = Math.max, Z = Math.min;\nvar ee = function(e, t, r) {\n    var n, o, i, l, s, u, c = 0, a = !1, f = !1, p = !0;\n    if (\"function\" != typeof e) throw new TypeError(\"Expected a function\");\n    function y(t) {\n        var r = n, i = o;\n        return n = o = void 0, c = t, l = e.apply(i, r);\n    }\n    function d(e) {\n        return c = e, s = setTimeout(g, t), a ? y(e) : l;\n    }\n    function m(e) {\n        var r = e - u;\n        return void 0 === u || r >= t || r < 0 || f && e - c >= i;\n    }\n    function g() {\n        var e = U();\n        if (m(e)) return b(e);\n        s = setTimeout(g, function(e) {\n            var r = t - (e - u);\n            return f ? Z(r, i - (e - c)) : r;\n        }(e));\n    }\n    function b(e) {\n        return s = void 0, p && n ? y(e) : (n = o = void 0, l);\n    }\n    function v() {\n        var e = U(), r = m(e);\n        if (n = arguments, o = this, u = e, r) {\n            if (void 0 === s) return d(u);\n            if (f) return clearTimeout(s), s = setTimeout(g, t), y(u);\n        }\n        return void 0 === s && (s = setTimeout(g, t)), l;\n    }\n    return t = Q(t) || 0, x(r) && (a = !!r.leading, i = (f = \"maxWait\" in r) ? X(Q(r.maxWait) || 0, t) : i, p = \"trailing\" in r ? !!r.trailing : p), v.cancel = function() {\n        void 0 !== s && clearTimeout(s), c = 0, n = u = o = s = void 0;\n    }, v.flush = function() {\n        return void 0 === s ? l : b(U());\n    }, v;\n}, te = function(e) {\n    g(i, r.Component);\n    var o = j(i);\n    function i() {\n        var e;\n        c(this, i);\n        for(var n = arguments.length, l = new Array(n), a = 0; a < n; a++)l[a] = arguments[a];\n        return p(h(e = o.call.apply(o, [\n            this\n        ].concat(l))), \"gallery_element\", r.createRef()), p(h(e), \"_groups\", {}), p(h(e), \"_listeners\", {}), p(h(e), \"_will_unmount\", !1), p(h(e), \"_forceUpdate\", ee(e.forceUpdate, 50)), p(h(e), \"loadLightgalleryJS\", function() {\n            var r = e.props, n = r.plugins, o = r.onLightgalleryImport;\n            s.isBrowser && !window.lgData && Promise.resolve().then(function() {\n                return t(__webpack_require__(/*! lightgallery.js */ \"(ssr)/./node_modules/lightgallery.js/lib/js/lightgallery.js\"));\n            }).then(function() {\n                n.includes(\"lg-autoplay.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-autoplay.js */ \"(ssr)/./node_modules/lg-autoplay.js/dist/lg-autoplay.js\"));\n                }).then(), n.includes(\"lg-fullscreen.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-fullscreen.js */ \"(ssr)/./node_modules/lg-fullscreen.js/dist/lg-fullscreen.js\"));\n                }).then(), n.includes(\"lg-hash.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-hash.js */ \"(ssr)/./node_modules/lg-hash.js/dist/lg-hash.js\"));\n                }).then(), n.includes(\"lg-pager.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-pager.js */ \"(ssr)/./node_modules/lg-pager.js/dist/lg-pager.js\"));\n                }).then(), n.includes(\"lg-thumbnail.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-thumbnail.js */ \"(ssr)/./node_modules/lg-thumbnail.js/dist/lg-thumbnail.js\"));\n                }).then(), n.includes(\"lg-video.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-video.js */ \"(ssr)/./node_modules/lg-video.js/dist/lg-video.js\"));\n                }).then(), n.includes(\"lg-zoom.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-zoom.js */ \"(ssr)/./node_modules/lg-zoom.js/dist/lg-zoom.js\"));\n                }).then(), n.includes(\"lg-share.js\") && Promise.resolve().then(function() {\n                    return t(__webpack_require__(/*! lg-share.js */ \"(ssr)/./node_modules/lg-share.js/dist/lg-share.js\"));\n                }).then(), o && o();\n            });\n        }), p(h(e), \"destroy\", function() {\n            e._will_unmount = !0, e._forceUpdate.cancel(), e.destroyExistGallery();\n        }), p(h(e), \"getLgUid\", function() {\n            if (e.gallery_element.current) return e.gallery_element.current.getAttribute(\"lg-uid\");\n        }), p(h(e), \"hasGroup\", function(t) {\n            return e._groups.hasOwnProperty(t);\n        }), p(h(e), \"registerPhoto\", function(t, r, n) {\n            e._groups = m(m({}, e._groups), {}, p({}, r, [].concat(w(e._groups[r] || []), [\n                m(m({}, n), {}, {\n                    uid: t\n                })\n            ]))), e._forceUpdate();\n        }), p(h(e), \"unregisterPhoto\", function(t, r) {\n            e._will_unmount || (e._groups = m(m({}, e._groups), {}, p({}, r, e._groups[r].filter(function(e) {\n                return e.uid !== t;\n            }))), e._forceUpdate());\n        }), p(h(e), \"getLightgalleryObject\", function() {\n            return window.lgData[e.getLgUid()];\n        }), p(h(e), \"destroyExistGallery\", function() {\n             false && (0);\n        }), p(h(e), \"setUpListener\", function(t, r) {\n            var n = function(n) {\n                e.props[t] && e.props[t](n, e.getLightgalleryObject()), r && r();\n            };\n            e.gallery_element.current.addEventListener(t, n), e._listeners[t] && console.error(\"Event \".concat(t, \" already exist in _listeners\")), e._listeners[t] = n;\n        }), p(h(e), \"removeListener\", function(t) {\n            var r = e.gallery_element.current;\n            e._listeners[t] && (r.removeEventListener(t, e._listeners[t]), delete e._listeners[t]);\n        }), p(h(e), \"removeListeners\", function() {\n            for(var t in e._listeners)e.removeListener(t);\n        }), p(h(e), \"setupListeners\", function() {\n            e.setUpListener(\"onBeforeOpen\"), e.setUpListener(\"onAfterOpen\"), e.setUpListener(\"onSlideItemLoad\"), e.setUpListener(\"onBeforeSlide\"), e.setUpListener(\"onAfterSlide\"), e.setUpListener(\"onBeforePrevSlide\"), e.setUpListener(\"onBeforeNextSlide\"), e.setUpListener(\"onDragstart\"), e.setUpListener(\"onDragmove\"), e.setUpListener(\"onDragend\"), e.setUpListener(\"onSlideClick\"), e.setUpListener(\"onBeforeClose\"), e.setUpListener(\"onCloseAfter\", function() {\n                setTimeout(function() {\n                    e.destroyExistGallery();\n                }, 0);\n            });\n        }), p(h(e), \"getGroupByName\", function(t) {\n            if (e.hasGroup(t)) return e._groups[t];\n            console.error(\"Trying to open undefined group with name '\".concat(t, \"'\"));\n        }), p(h(e), \"openGallery\", function(t, r) {\n            var n = e.getGroupByName(r), o = Math.max(n.findIndex(function(e) {\n                return e.uid === t;\n            }), 0);\n            e.openGalleryByIndex(o, r);\n        }), p(h(e), \"openGalleryByIndex\", function() {\n            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r = arguments.length > 1 ? arguments[1] : void 0;\n            if (e.gallery_element.current) {\n                e.destroyExistGallery();\n                var n = e.getGroupByName(r);\n                lightGallery(e.gallery_element.current, m(m({}, e.props.lightgallerySettings || {}), {}, {\n                    dynamic: !0,\n                    dynamicEl: n,\n                    index: t\n                })), e.setupListeners();\n            } else console.error(\"Error on trying to open gallery; ref 'gallery_element' is not defined\");\n        }), e;\n    }\n    return f(i, [\n        {\n            key: \"componentDidMount\",\n            value: function() {\n                this.loadLightgalleryJS();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function() {\n                this.destroy();\n            }\n        },\n        {\n            key: \"render\",\n            value: function() {\n                var e = this.props, t = e.galleryClassName, r = void 0 === t ? _(\"gallery\") : t, o = e.portalElementSelector, i = null;\n                if (s.isBrowser && (i = document.body, o)) {\n                    var u = document.querySelector(o);\n                    u || console.error(\"There is cannot to find element by selector: `${portalElementSelector}` lightgallery element will be added to document.body\"), i = u;\n                }\n                return n.createElement(P.Provider, {\n                    value: {\n                        registerPhoto: this.registerPhoto,\n                        unregisterPhoto: this.unregisterPhoto,\n                        openGallery: this.openGallery,\n                        openGalleryByIndex: this.openGalleryByIndex,\n                        hasGroup: this.hasGroup\n                    }\n                }, this.props.children, i && l.createPortal(n.createElement(\"div\", {\n                    className: r,\n                    ref: this.gallery_element\n                }), i));\n            }\n        }\n    ]), i;\n}();\np(te, \"defaultProps\", {\n    plugins: [\n        \"lg-fullscreen.js\",\n        \"lg-thumbnail.js\",\n        \"lg-video.js\",\n        \"lg-zoom.js\"\n    ]\n}), p(te, \"propTypes\", {\n    children: o.any,\n    plugins: o.arrayOf(o.oneOf([\n        \"lg-autoplay.js\",\n        \"lg-fullscreen.js\",\n        \"lg-hash.js\",\n        \"lg-pager.js\",\n        \"lg-thumbnail.js\",\n        \"lg-video.js\",\n        \"lg-zoom.js\",\n        \"lg-share.js\"\n    ])),\n    lightgallerySettings: o.object,\n    galleryClassName: o.string,\n    portalElementSelector: o.string,\n    onBeforeOpen: o.func,\n    onAfterOpen: o.func,\n    onSlideItemLoad: o.func,\n    onBeforeSlide: o.func,\n    onAfterSlide: o.func,\n    onBeforePrevSlide: o.func,\n    onBeforeNextSlide: o.func,\n    onDragstart: o.func,\n    onDragmove: o.func,\n    onDragend: o.func,\n    onSlideClick: o.func,\n    onBeforeClose: o.func,\n    onCloseAfter: o.func,\n    onLightgalleryImport: o.func\n});\nvar re = function() {\n    var e = r.useContext(P), t = e.hasGroup, n = e.openGalleryByIndex;\n    return {\n        openGallery: function(e) {\n            var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n            if (!e) throw new Error(\"You must to provide 'group_name' on call function 'openGallery'\");\n            if (!t(e)) throw new Error(\"Group '\".concat(e, \"' is not exists\"));\n            n(r, e);\n        }\n    };\n}, ne = \"function\" == typeof Symbol && Symbol.for, oe = ne ? Symbol.for(\"react.element\") : 60103, ie = ne ? Symbol.for(\"react.portal\") : 60106, le = ne ? Symbol.for(\"react.fragment\") : 60107, se = ne ? Symbol.for(\"react.strict_mode\") : 60108, ue = ne ? Symbol.for(\"react.profiler\") : 60114, ce = ne ? Symbol.for(\"react.provider\") : 60109, ae = ne ? Symbol.for(\"react.context\") : 60110, fe = ne ? Symbol.for(\"react.async_mode\") : 60111, pe = ne ? Symbol.for(\"react.concurrent_mode\") : 60111, ye = ne ? Symbol.for(\"react.forward_ref\") : 60112, de = ne ? Symbol.for(\"react.suspense\") : 60113, me = ne ? Symbol.for(\"react.suspense_list\") : 60120, ge = ne ? Symbol.for(\"react.memo\") : 60115, be = ne ? Symbol.for(\"react.lazy\") : 60116, ve = ne ? Symbol.for(\"react.block\") : 60121, he = ne ? Symbol.for(\"react.fundamental\") : 60117, Se = ne ? Symbol.for(\"react.responder\") : 60118, je = ne ? Symbol.for(\"react.scope\") : 60119;\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ function we(e) {\n    if (\"object\" == typeof e && null !== e) {\n        var t = e.$$typeof;\n        switch(t){\n            case oe:\n                switch(e = e.type){\n                    case fe:\n                    case pe:\n                    case le:\n                    case ue:\n                    case se:\n                    case de:\n                        return e;\n                    default:\n                        switch(e = e && e.$$typeof){\n                            case ae:\n                            case ye:\n                            case be:\n                            case ge:\n                            case ce:\n                                return e;\n                            default:\n                                return t;\n                        }\n                }\n            case ie:\n                return t;\n        }\n    }\n}\nfunction Oe(e) {\n    return we(e) === pe;\n}\nvar Pe = {\n    AsyncMode: fe,\n    ConcurrentMode: pe,\n    ContextConsumer: ae,\n    ContextProvider: ce,\n    Element: oe,\n    ForwardRef: ye,\n    Fragment: le,\n    Lazy: be,\n    Memo: ge,\n    Portal: ie,\n    Profiler: ue,\n    StrictMode: se,\n    Suspense: de,\n    isAsyncMode: function(e) {\n        return Oe(e) || we(e) === fe;\n    },\n    isConcurrentMode: Oe,\n    isContextConsumer: function(e) {\n        return we(e) === ae;\n    },\n    isContextProvider: function(e) {\n        return we(e) === ce;\n    },\n    isElement: function(e) {\n        return \"object\" == typeof e && null !== e && e.$$typeof === oe;\n    },\n    isForwardRef: function(e) {\n        return we(e) === ye;\n    },\n    isFragment: function(e) {\n        return we(e) === le;\n    },\n    isLazy: function(e) {\n        return we(e) === be;\n    },\n    isMemo: function(e) {\n        return we(e) === ge;\n    },\n    isPortal: function(e) {\n        return we(e) === ie;\n    },\n    isProfiler: function(e) {\n        return we(e) === ue;\n    },\n    isStrictMode: function(e) {\n        return we(e) === se;\n    },\n    isSuspense: function(e) {\n        return we(e) === de;\n    },\n    isValidElementType: function(e) {\n        return \"string\" == typeof e || \"function\" == typeof e || e === le || e === pe || e === ue || e === se || e === de || e === me || \"object\" == typeof e && null !== e && (e.$$typeof === be || e.$$typeof === ge || e.$$typeof === ce || e.$$typeof === ae || e.$$typeof === ye || e.$$typeof === he || e.$$typeof === Se || e.$$typeof === je || e.$$typeof === ve);\n    },\n    typeOf: we\n}, _e = C(function(e, t) {\n     true && function() {\n        var e = \"function\" == typeof Symbol && Symbol.for, r = e ? Symbol.for(\"react.element\") : 60103, n = e ? Symbol.for(\"react.portal\") : 60106, o = e ? Symbol.for(\"react.fragment\") : 60107, i = e ? Symbol.for(\"react.strict_mode\") : 60108, l = e ? Symbol.for(\"react.profiler\") : 60114, s = e ? Symbol.for(\"react.provider\") : 60109, u = e ? Symbol.for(\"react.context\") : 60110, c = e ? Symbol.for(\"react.async_mode\") : 60111, a = e ? Symbol.for(\"react.concurrent_mode\") : 60111, f = e ? Symbol.for(\"react.forward_ref\") : 60112, p = e ? Symbol.for(\"react.suspense\") : 60113, y = e ? Symbol.for(\"react.suspense_list\") : 60120, d = e ? Symbol.for(\"react.memo\") : 60115, m = e ? Symbol.for(\"react.lazy\") : 60116, g = e ? Symbol.for(\"react.block\") : 60121, b = e ? Symbol.for(\"react.fundamental\") : 60117, v = e ? Symbol.for(\"react.responder\") : 60118, h = e ? Symbol.for(\"react.scope\") : 60119;\n        function S(e) {\n            if (\"object\" == typeof e && null !== e) {\n                var t = e.$$typeof;\n                switch(t){\n                    case r:\n                        var y = e.type;\n                        switch(y){\n                            case c:\n                            case a:\n                            case o:\n                            case l:\n                            case i:\n                            case p:\n                                return y;\n                            default:\n                                var g = y && y.$$typeof;\n                                switch(g){\n                                    case u:\n                                    case f:\n                                    case m:\n                                    case d:\n                                    case s:\n                                        return g;\n                                    default:\n                                        return t;\n                                }\n                        }\n                    case n:\n                        return t;\n                }\n            }\n        }\n        var j = c, w = a, O = u, P = s, _ = r, $ = f, x = o, L = m, C = d, E = n, M = l, T = i, U = p, G = !1;\n        function D(e) {\n            return S(e) === a;\n        }\n        t.AsyncMode = j, t.ConcurrentMode = w, t.ContextConsumer = O, t.ContextProvider = P, t.Element = _, t.ForwardRef = $, t.Fragment = x, t.Lazy = L, t.Memo = C, t.Portal = E, t.Profiler = M, t.StrictMode = T, t.Suspense = U, t.isAsyncMode = function(e) {\n            return G || (G = !0, console.warn(\"The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.\")), D(e) || S(e) === c;\n        }, t.isConcurrentMode = D, t.isContextConsumer = function(e) {\n            return S(e) === u;\n        }, t.isContextProvider = function(e) {\n            return S(e) === s;\n        }, t.isElement = function(e) {\n            return \"object\" == typeof e && null !== e && e.$$typeof === r;\n        }, t.isForwardRef = function(e) {\n            return S(e) === f;\n        }, t.isFragment = function(e) {\n            return S(e) === o;\n        }, t.isLazy = function(e) {\n            return S(e) === m;\n        }, t.isMemo = function(e) {\n            return S(e) === d;\n        }, t.isPortal = function(e) {\n            return S(e) === n;\n        }, t.isProfiler = function(e) {\n            return S(e) === l;\n        }, t.isStrictMode = function(e) {\n            return S(e) === i;\n        }, t.isSuspense = function(e) {\n            return S(e) === p;\n        }, t.isValidElementType = function(e) {\n            return \"string\" == typeof e || \"function\" == typeof e || e === o || e === a || e === l || e === i || e === p || e === y || \"object\" == typeof e && null !== e && (e.$$typeof === m || e.$$typeof === d || e.$$typeof === s || e.$$typeof === u || e.$$typeof === f || e.$$typeof === b || e.$$typeof === v || e.$$typeof === h || e.$$typeof === g);\n        }, t.typeOf = S;\n    }();\n}), $e = (_e.AsyncMode, _e.ConcurrentMode, _e.ContextConsumer, _e.ContextProvider, _e.Element, _e.ForwardRef, _e.Fragment, _e.Lazy, _e.Memo, _e.Portal, _e.Profiler, _e.StrictMode, _e.Suspense, _e.isAsyncMode, _e.isConcurrentMode, _e.isContextConsumer, _e.isContextProvider, _e.isElement, _e.isForwardRef, _e.isFragment, _e.isLazy, _e.isMemo, _e.isPortal, _e.isProfiler, _e.isStrictMode, _e.isSuspense, _e.isValidElementType, _e.typeOf, C(function(e) {\n     false ? 0 : e.exports = _e;\n})), xe = {\n    childContextTypes: !0,\n    contextType: !0,\n    contextTypes: !0,\n    defaultProps: !0,\n    displayName: !0,\n    getDefaultProps: !0,\n    getDerivedStateFromError: !0,\n    getDerivedStateFromProps: !0,\n    mixins: !0,\n    propTypes: !0,\n    type: !0\n}, Le = {\n    name: !0,\n    length: !0,\n    prototype: !0,\n    caller: !0,\n    callee: !0,\n    arguments: !0,\n    arity: !0\n}, Ce = {\n    $$typeof: !0,\n    compare: !0,\n    defaultProps: !0,\n    displayName: !0,\n    propTypes: !0,\n    type: !0\n}, Ee = {};\nfunction Me(e) {\n    return $e.isMemo(e) ? Ce : Ee[e.$$typeof] || xe;\n}\nEe[$e.ForwardRef] = {\n    $$typeof: !0,\n    render: !0,\n    defaultProps: !0,\n    displayName: !0,\n    propTypes: !0\n}, Ee[$e.Memo] = Ce;\nvar Te = Object.defineProperty, Ue = Object.getOwnPropertyNames, Ge = Object.getOwnPropertySymbols, De = Object.getOwnPropertyDescriptor, Ne = Object.getPrototypeOf, Ae = Object.prototype;\nvar Be = function e(t, r, n) {\n    if (\"string\" != typeof r) {\n        if (Ae) {\n            var o = Ne(r);\n            o && o !== Ae && e(t, o, n);\n        }\n        var i = Ue(r);\n        Ge && (i = i.concat(Ge(r)));\n        for(var l = Me(t), s = Me(r), u = 0; u < i.length; ++u){\n            var c = i[u];\n            if (!(Le[c] || n && n[c] || s && s[c] || l && l[c])) {\n                var a = De(r, c);\n                try {\n                    Te(t, c, a);\n                } catch (e) {}\n            }\n        }\n    }\n    return t;\n};\nexports.LightgalleryItem = $, exports.LightgalleryProvider = te, exports.useLightgallery = re, exports.withLightgallery = function(e) {\n    var t = function(t) {\n        var r = re().openGallery;\n        return n.createElement(e, y({}, t, {\n            openGallery: r\n        }));\n    };\n    return Be(t, e), t.displayName = \"withLightgallary(\".concat(e.displayName, \")\"), t;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-lightgallery/dist/index.js\n");

/***/ })

};
;